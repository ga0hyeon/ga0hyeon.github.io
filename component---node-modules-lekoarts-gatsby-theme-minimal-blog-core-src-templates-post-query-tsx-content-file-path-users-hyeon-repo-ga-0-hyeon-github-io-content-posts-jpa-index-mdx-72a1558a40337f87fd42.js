"use strict";(self.webpackChunkminimal_blog=self.webpackChunkminimal_blog||[]).push([[58],{4765:function(e,t,n){n.d(t,{F:function(){return p},Z:function(){return E}});var a=n(7294),r=n(8733),l=n(795),c=n(6920),i=n(6799),o=n(8871);var s=e=>{let{post:t}=e;return null};const u=["16px","8px","4px"].map((e=>"rgba(0, 0, 0, 0.1) 0px "+e+" "+e+" 0px"));var m=e=>{let{data:{post:t},children:n}=e;return(0,r.tZ)(c.Z,null,(0,r.tZ)(l.X6,{as:"h1",variant:"styles.h1"},t.title),(0,r.tZ)("p",{sx:{color:"secondary",mt:3,a:{color:"secondary"},fontSize:[1,1,2]}},(0,r.tZ)("time",null,t.date),t.tags&&(0,r.tZ)(a.Fragment,null," — ",(0,r.tZ)(i.Z,{tags:t.tags})),t.timeToRead&&" — ",t.timeToRead&&(0,r.tZ)("span",null,t.timeToRead," min read")),(0,r.tZ)("section",{sx:{my:5,".gatsby-resp-image-wrapper":{my:[4,4,5],borderRadius:"4px",boxShadow:u.join(", "),".gatsby-resp-image-image":{borderRadius:"4px"}},variant:"layout.content"}},n),(0,r.tZ)(s,{post:t}))};const p=e=>{var t,n,a;let{data:{post:l}}=e;return(0,r.tZ)(o.Z,{title:l.title,description:l.description?l.description:l.excerpt,image:l.banner?null===(t=l.banner)||void 0===t||null===(n=t.childImageSharp)||void 0===n||null===(a=n.resize)||void 0===a?void 0:a.src:void 0,pathname:l.slug,canonicalUrl:l.canonicalUrl})};function E(e){let{...t}=e;return a.createElement(m,t)}},6799:function(e,t,n){var a=n(8733),r=n(7294),l=n(1883),c=n(3494),i=n(9706);t.Z=e=>{let{tags:t}=e;const{tagsPath:n,basePath:o}=(0,c.Z)();return(0,a.tZ)(r.Fragment,null,t.map(((e,t)=>(0,a.tZ)(r.Fragment,{key:e.slug},!!t&&", ",(0,a.tZ)(l.Link,{sx:e=>{var t;return{...null===(t=e.styles)||void 0===t?void 0:t.a}},to:(0,i.Z)("/"+o+"/"+n+"/"+e.slug)},e.name)))))}},8871:function(e,t,n){var a=n(7294),r=n(1883),l=n(4232);t.Z=e=>{let{title:t="",description:n="",pathname:c="",image:i="",children:o=null,canonicalUrl:s=""}=e;const u=(0,l.Z)(),{siteTitle:m,siteTitleAlt:p,siteUrl:E,siteDescription:d,siteImage:g,author:h,siteLanguage:y}=u,w={title:t?t+" | "+m:p,description:n||d,url:""+E+(c||""),image:""+E+(i||g)};return a.createElement(a.Fragment,null,a.createElement("html",{lang:y}),a.createElement("title",null,w.title),a.createElement("meta",{name:"description",content:w.description}),a.createElement("meta",{name:"image",content:w.image}),a.createElement("meta",{property:"og:title",content:w.title}),a.createElement("meta",{property:"og:url",content:w.url}),a.createElement("meta",{property:"og:description",content:w.description}),a.createElement("meta",{property:"og:image",content:w.image}),a.createElement("meta",{property:"og:type",content:"website"}),a.createElement("meta",{property:"og:image:alt",content:w.description}),a.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),a.createElement("meta",{name:"twitter:title",content:w.title}),a.createElement("meta",{name:"twitter:url",content:w.url}),a.createElement("meta",{name:"twitter:description",content:w.description}),a.createElement("meta",{name:"twitter:image",content:w.image}),a.createElement("meta",{name:"twitter:image:alt",content:w.description}),a.createElement("meta",{name:"twitter:creator",content:h}),a.createElement("meta",{name:"gatsby-theme",content:"@lekoarts/gatsby-theme-minimal-blog"}),a.createElement("link",{rel:"icon",type:"image/png",sizes:"32x32",href:(0,r.withPrefix)("/favicon-32x32.png")}),a.createElement("link",{rel:"icon",type:"image/png",sizes:"16x16",href:(0,r.withPrefix)("/favicon-16x16.png")}),a.createElement("link",{rel:"apple-touch-icon",sizes:"180x180",href:(0,r.withPrefix)("/apple-touch-icon.png")}),s?a.createElement("link",{rel:"canonical",href:s}):null,o)}},7414:function(e,t,n){n.r(t),n.d(t,{Head:function(){return i.F},default:function(){return o}});var a=n(7294),r=n(1151);function l(e){const t=Object.assign({h1:"h1",p:"p",hr:"hr",a:"a",code:"code",pre:"pre",ul:"ul",li:"li",br:"br"},(0,r.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.h1,null,"Motivation"),"\n",a.createElement(t.p,null,'저는 JPA를 써본적이 없는데요. JPA를 사용해본/하고있는 사람들에게 JPA를 설명해달라고 하면 "하... 너넨 이런거 하지마라 🚬" 느낌으로다가 별로라고 말해주곤 하더라구요.\n하지 말라고 하면 더 해보고 싶어서 한 번 간단한 샘플을 띄워보기로 했습니다.'),"\n",a.createElement(t.hr),"\n",a.createElement(t.h1,null,"Spring Initializer 로 프로젝트 뼈대 생성"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://start.spring.io/"},"Initializer"),"로 프로젝트 뼈대를 생성합니다."),"\n",a.createElement(t.p,null,"언어 옵션 중 Kotlin이 아주 잠깐 궁금했으나 잘 참고 Java를 고릅니다 ㅎㅎ 왜냐면 아직 Java도 아직 잘모르기 때문이죠 🤦‍♀️\nDependency는 각자 필요한 것을 선택하면 되는데, 저는 Lombok, JPA, Flyway, Web 을 골랐습니다."),"\n",a.createElement(t.hr),"\n",a.createElement(t.h1,null,"Application.yaml 설정"),"\n",a.createElement(t.p,null,"Initializer로 만든 폴더 안에는 application.properties가 기본으로 생성되어있으나 저는 가독성 때문에 yaml 포맷을 선호하므로 application.yaml 파일을 만들어줍니다.\n아래와 같이 application.yaml를 설정해주면 ",a.createElement(t.code,null,"MySQL - JPA - flyway")," 는 잘 연동이 됩니다."),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-yaml"},"server:\n  address: localhost\n  port: 8080\n\nspring:\n  flyway:\n    enabled: true\n    locations: classpath:db/migration\n    schemas: coworksaga\n    baseline-on-migrate: true\n    url: &db-url jdbc:mysql://localhost:3306/coworksaga?useSSL=false&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Seoul&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true\n    user: &db-user coworksaga\n    password: &db-pwd root1234\n    create-schemas: true\n  jpa:\n    database: mysql\n    hibernate:\n      ddl-auto: validate\n    show-sql: true\n    format-sql: true\n    use-sql-comments: true\n    properties:\n      hibernate:\n        temp:\n          use_jdbc_metadata_defaults: false\n  datasource:\n      url: *db-url\n      username: *db-user\n      password: *db-pwd\n      driver-class-name: com.mysql.cj.jdbc.Driver\n\n\nlogging:\n  level:\n    org.hibernate.SQL: DEBUG\n    org.hibernate.type: TRACE\n")),"\n",a.createElement(t.p,null,"+) 깨달은점"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"&, * 페어로 변수를 선언하고 불러다 쓸 수 있습니다. 굿굿"),"\n",a.createElement(t.li,null,"DB 스키마가 없을때 자동으로 생성하도록 하기 위해서는 jdbc url에 ",a.createElement(t.code,null,"createDatabaseIfNotExist=true")," 옵션을 주면 됩니다."),"\n",a.createElement(t.li,null,"JPA를 사용하면 기본 옵션으로 서버가 뜰때 자동으로 DB Connection을 맺어주는데요. 위에서 말한대로 저는 서버 기동 시점에 DB 스키마가 없는 상황을 가정하고 jdbc url에 옵션을 줬으므로 이 기본 동작을 꺼줘야합니다. ",a.createElement(t.a,{href:"https://www.baeldung.com/spring-data-jpa-run-app-without-db"},"baeldung 아티클")," 에 내용 밎 설정 방법이 잘 설명되어 있습니다."),"\n",a.createElement(t.li,null,"JPA에 대해 정말 지식이 없어서... 단순히 특정 규칙을 가진 메소드 명으로 쿼리 만들어주는 기능만 하는 줄 알았는데, DDL 자동 생성 기능도 있어서 신기했습니다. 오히려 불편할 것 같다는 생각이 들어 꺼두었지만요 ㅎㅎ"),"\n"),"\n",a.createElement(t.p,null,"+) 궁금한점"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"비슷한 카테고리 같은데 왜 depth가 왜 다른걸까요? jpa.hibernate랑 jpa.properties.hibernate 처럼."),"\n",a.createElement(t.li,null,"url username passwork 이거 다 datasource, flyway에 두 번씩 쓰게 되어있는데.. 변수로 정리해두긴 했으나, 두 옵션이 한 값을 바라보도록 바로 설정은 안되는걸까요?"),"\n"),"\n",a.createElement(t.hr),"\n",a.createElement(t.h1,null,"Layer 별 폴더 트리 생성"),"\n",a.createElement(t.p,null,"이제 로컬에 서버를 띄울 수 있는 상태가 되었으니 실제로 기능 개발을 할 수 있도록 폴더를 생성합니다."),"\n",a.createElement(t.p,null,"매번 Layer (Controller, Service, Repository) 별로 폴더링을 했는데 문득 다른 사람들은 어쩌고 있나 싶어 찾아보니 Entity/Domain별로 묶는 방법도 쓰이고 있네요. 사실 폴더로 묶으면 한 패키지가 되니, 패키지랑 맥락이 비슷한 개념은 Layer보단 Entity/Domain인 것 같기도 하고 고민이 되긴 합니다. 그렇다고 실제로 패키지별로 따로 묶어서 배포/공유하는 것도 아니니 생각보다 엄청나게 메리트가 있을 것 같지 않기는 하지만요."),"\n",a.createElement(t.p,null,"우선 이번에도 Layer로 폴더를 나누도록 합니다."),"\n",a.createElement(t.hr),"\n",a.createElement(t.h1,null,"첫번째 flyway 스크립트와 REST api 만들기"),"\n",a.createElement(t.p,null,"이제 첫번째 REST API를 만들어봅니다.",a.createElement(t.br),"\n","uuid를 넘기면 workspace 이름을 조회하는 API이며, 그러려면 우선 workspace 테이블을 생성해주어야하겠습니다."),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,"V0_1_0__create_workspaces.sql"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-sql"},"CREATE TABLE workspaces (\n\tworkspace_id INT UNSIGNED auto_increment NOT NULL PRIMARY KEY,\n\tworkspace_name varchar(100) NOT NULL,\n\tworkspace_uuid varchar(36) NOT NULL,\n\tworkspace_password varchar(10) NULL,\n\tcreated_at DATETIME NOT NULL DEFAULT NOW(),\n\tupdated_at DATETIME NOT NULL DEFAULT NOW() ON UPDATE NOW()\n)\nENGINE=InnoDB\nDEFAULT CHARSET=utf8mb4\nCOLLATE=utf8mb4_unicode_ci\n")),"\n"),"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,"V0_1_1__insert_workspaces.sql"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-sql"},"INSERT INTO workspaces\n(workspace_id, workspace_name, workspace_uuid, workspace_password, created_at, updated_at)\nVALUES(1, \"HYEON's workspace\", '2a2ba386-1ca1-49c6-8573-076916ac6139', 'Password', now(), now());\n")),"\n"),"\n"),"\n",a.createElement(t.p,null,"이제 Entity를 생성합니다."),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,"Workspace"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-java"},'@Entity\n@Table(name = "workspaces")\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\n@Getter\npublic class Workspace {\n    @Id\n    private Integer id;\n    private String name;\n    @Column(name = "uuid", unique = true)\n    private String uuid;\n    private String password;\n    private String createdAt;\n    private String updatedAt;\n}\n')),"\n"),"\n"),"\n",a.createElement(t.p,null,"그리고 차례대로 Repository, Service, Controller를 만들어줍니다."),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,"WorkspaceRepository"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-java"},"@Repository\npublic interface WorkspaceRepository extends JpaRepository<Workspace, Integer> {\n    Workspace findByUuid(String uuid);\n}\n")),"\n"),"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,"WorkspaceService"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-java"},"@Service\n@RequiredArgsConstructor\npublic class WorkspaceService {\n    private final WorkspaceRepository workspaceRepository;\n\n    public Workspace getWorkspace(String uuid) {\n        return workspaceRepository.findByUuid(uuid);\n    }\n}\n")),"\n"),"\n",a.createElement(t.li,null,"\n",a.createElement(t.p,null,"WorkspaceController"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-java"},'@RestController\n@RequiredArgsConstructor\npublic class WorkspaceController {\n    private final WorkspaceService workspaceService;\n\n    @GetMapping("/workspaces/{uuid}")\n    public Workspace workspaceDetail(@PathVariable @Length(min=16, max=16) String uuid) {\n        return workspaceService.getWorkspace(uuid);\n    }\n}\n')),"\n"),"\n"),"\n",a.createElement(t.p,null,"+) 쿼리 결과는 정상적이지만 API 응답이 그냥  ",a.createElement(t.code,null,"{}")," 로 떨어지는 경우"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"return 한 Entity에 public getter가 없어서 그럴 수 있습니다. ",a.createElement(t.a,{href:"https://stackoverflow.com/questions/49117622/spring-rest-controller-returns-empty-json-iterable-data-structure-why"},"참고")),"\n"),"\n",a.createElement(t.hr),"\n",a.createElement(t.h1,null,"마치며"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"처음부터 해보면 머리에 확실히 잘 들오는 것 같습니다 👍 get api 하나 만드는데 생각보다 많은 것을 배웠네요."),"\n",a.createElement(t.li,null,'너무 간단한 예제만 만들어서 아직은 왜 "하... 너넨 이런거(JPA) 하지마라 🚬" 하는건 지 못 느꼈어요. 더 써봐야되겠습니다.'),"\n"))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?a.createElement(t,e,a.createElement(l,e)):l(e)},i=n(4765);function o(e){return a.createElement(i.Z,e,a.createElement(c,e))}i.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-users-hyeon-repo-ga-0-hyeon-github-io-content-posts-jpa-index-mdx-72a1558a40337f87fd42.js.map