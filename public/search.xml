<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>나를 표현하는 이력 페이지 만들기</title>
    <url>/2022/01/22/Resume/</url>
    <content><![CDATA[<h1 id="MOTIVATION"><a href="#MOTIVATION" class="headerlink" title="MOTIVATION"></a>MOTIVATION</h1><p>처음 블로그를 deploy할 때, About Me 페이지는 다음에 더 손봐야지~ 하고 대충 만들었었는데요.</p>
<p>한 페이지에 내가 잘하는 것, 하고싶은 것, 했던 것에 대한 정보를 짜임새 있게 보여주기가 어렵더라구요… 감히 html 쪼가리가 나를 표현한다니! 라는 생각도 들고요 ㅋㅋㅋ<br>다른 한 편으로는 나에 대해서 정리하고 돌아보는 시간을 계속 미루고 싶었던 것 같기도 합니다.</p>
<p>어떻게 하면 짜임새 있게 나를 표현할 수 있을까 고민했던 내용을 기록해볼게요.</p>
<h1 id="계획"><a href="#계획" class="headerlink" title="계획"></a>계획</h1><p>우선 보여주고 싶은 정보의 특성에 따라 보여주는 방식도 달랐으면 했습니다.</p>
<ul>
<li>이력은 타임라인</li>
<li>기술스택은 관련 직군이라면 알아볼 수 있을 만큼만 간결하게 뱃지로</li>
<li>사이드 플젝 진행이력은 신뢰가 가도록 다양한 정보를 담아서</li>
<li>성격이 드러나는 짧은 소개글</li>
</ul>
<p>또, 화면과 인터랙션해서 보여줘야하는 추가정보인지 / 처음부터 보여져야하는 필수정보인지에 따라서도 구현 방식이 달라져야 했구요.</p>
<ul>
<li>추가정보라면 툴팁과 아코디언을 적절히 사용해서 화면이 복잡해 보이지 얺도록</li>
<li>필수정보라면 font style과 margin, padding 을 조절하여 화면이 복잡해 보이지 않도록</li>
</ul>
<p>🤔 뜬금없지만, 역시 내 product를 만든다고 생각하고 UX를 고민하는 작업은 항상 재미있는 것 같아요. 잘하고 싶어져서 더 알아보고, 더 알아보면 더 잘하게 되고…</p>
<h1 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h1><p>이전 글에서 언급했듯 이 블로그는 Hexo와 Next theme 그리고 약간의 customizing으로 구현되어있는데요. 기존의 틀을 그대로 활용하여 마크다운 추가만으로도 이력 페이지를 꾸밀 수는 있겠지만 그걸로는 원하는 기능을 모두 구현할 수 없었고, 고민하지 않고 React의 도움을 받기로 했습니다.</p>
<p>전체가 React로 구성되는 프로젝트는 아주 많이 만들어봤지만, html로 이미 구현된 페이지에 React Element를 삽입하는 형태로는 작업해본 적이 없었네요. 물론 공식 가이드 첫 부분에 나올 정도로 흔한 상식이긴하지만요… =)</p>
<h2 id="React-ReactDOM-CDN-추가"><a href="#React-ReactDOM-CDN-추가" class="headerlink" title="React, ReactDOM CDN 추가"></a>React, ReactDOM CDN 추가</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;like_button_container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- global 변수로 React를 가져다 사용하기 위해 아래와 같이 CDN을 통해 js를 불러오도록 합니다. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@17/umd/react.production.min.js&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@17/umd/react-dom.production.min.js&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">//아래의 예제는 React 공식 docs에서 제공하는 예제입니다.</span></span></span><br><span class="line"><span class="javascript"><span class="meta">      &quot;use strict&quot;</span>; <span class="comment">//올바르지 않은 문법을 사전에 검출할 수 있도록 strict 모드를 쓴다는 의미라네요.</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> e = React.createElement;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="class"><span class="keyword">class</span> <span class="title">LikeButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">super</span>(props);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.state = &#123; <span class="attr">liked</span>: <span class="literal">false</span> &#125;;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="built_in">this</span>.state.liked) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">&quot;You liked this.&quot;</span>;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> e(</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;button&quot;</span>,</span></span><br><span class="line"><span class="javascript">            &#123; <span class="attr">onClick</span>: <span class="function">() =&gt;</span> <span class="built_in">this</span>.setState(&#123; <span class="attr">liked</span>: <span class="literal">true</span> &#125;) &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;Like&quot;</span></span></span><br><span class="line"><span class="javascript">          );</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> domContainer = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#like_button_container&quot;</span>);</span></span><br><span class="line"><span class="javascript">      ReactDOM.render(e(LikeButton), domContainer);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>이제 root/about/ 경로에 index.md 대신 index.html을 생성하고, 위의 코드를 넣어주면 끝입니다.</p>
<h2 id="babel-CDN-추가"><a href="#babel-CDN-추가" class="headerlink" title="babel CDN 추가"></a>babel CDN 추가</h2><p>이제 React를 CDN으로 바로 가져다 쓸 수 있다는 것이 확인되었으니, 제가 쓰기 편한 코드로 바꾸고 싶어졌습니다.<br>위의 예제에서 저는 크게 두 가지가 불편해보였어요.</p>
<ul>
<li>createElement</li>
<li>Class Component</li>
</ul>
<p>혹시 위의 예제에서 createElement 함수의 사용법을 보셨나요? 아래의 두 코드는 같은 동작을 위한 코드입니다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;doSomething&#125; /&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">createElement(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">onClick</span>: doSomething &#125;);</span><br></pre></td></tr></table></figure>

<p>차이점은, jsx가 훨씬 더 html스럽게 생겨서 개발자 친화적인 것 같네요. 저도 jsx를 사용하는게 더 편하기 때문에 CDN으로부터 불러온 babel 스크립트가 jsx 형식을 알아먹을 수 있도록 수정해볼게요.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;like_button_container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@17/umd/react.production.min.js&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@17/umd/react-dom.production.min.js&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type을 주는 것을 잊지 마세요. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">      &quot;use strict&quot;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; useState &#125; = React;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> LikeButton = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> [liked, setLiked] = useState(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> liked ? (</span></span><br><span class="line"><span class="javascript">          <span class="string">&quot;You liked this.&quot;</span></span></span><br><span class="line"><span class="javascript">        ) : (</span></span><br><span class="line"><span class="javascript">          <span class="xml"><span class="tag">&lt;<span class="name">button</span></span></span></span></span><br><span class="line"><span class="tag"><span class="xml"><span class="javascript">            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">              setLiked(true);</span></span></span><br><span class="line"><span class="xml"><span class="javascript">            &#125;&#125;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">          &gt;</span></span></span><br><span class="line"><span class="xml"><span class="javascript">            Like</span></span></span><br><span class="line"><span class="xml"><span class="javascript">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">        );</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">LikeButton</span> /&gt;</span></span>, domContainer);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>짠! 이제 제가 쓰기 편한 형태로 어느정도 정리가 된 것 같습니다.</p>
<h2 id="개발"><a href="#개발" class="headerlink" title="개발!"></a>개발!</h2><p>개발환경이 갖추어졌으니 아래의 주요 기능을 중심으로 개발하면 되겠습니다.</p>
<ul>
<li>이력 타임라인</li>
<li>기술스택 뱃지목록</li>
<li>사이드 플젝 진행이력</li>
<li>성격이 드러나는 짧은 소개글</li>
</ul>
<p>(WIP) 생각날 때마다 추가 중입니다 =)</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>React</tag>
        <tag>UI/UX</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native 개발환경 세팅하기</title>
    <url>/2022/01/13/RN-setup/</url>
    <content><![CDATA[<h1 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h1><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><ol>
<li><p>Node 12 이상 설치<br><code>brew install node</code></p>
</li>
<li><p>Watchman 설치<br><code>brew install watchman</code></p>
</li>
<li><p>[iOS/필수] Xcode 설치</p>
<p>appStore에서 설치하면 됩니다. (용량이 12기가라 매우 느립니다!)</p>
</li>
<li><p>[iOS/선택]<br>Xcode를 실행하여 Command Line Tools도 가장 최신으로 다운로드 하세요.</p>
<p><img src="https://reactnative.dev/assets/images/GettingStartedXcodeCommandLineTools-8259be8d3ab8575bec2b71988163c850.png"></p>
</li>
<li><p>[iOS/선택] 시뮬레이터 추가 설치<br><strong>Xcode &gt; Preferences…</strong> 에서 <strong>Components</strong> 탭 선택 후<br>원하는 iOS 시뮬레이터를 선택하여 추가할 수 있습니다.<br>현 : 지금 최신 Xcode를 받으면 iPhone13 (iOS15.2) 가 default로 설치되는 것 같아요</p>
</li>
<li><p>[iOS/필수] CocoaPods 설치</p>
<p><code>sudo gem install cocoapods</code></p>
</li>
<li><p>[AOS/필수] JDK 설치</p>
<p>Jdk8 이상이 필요합니다.<br><code>brew install --cask adoptopenjdk/openjdk/adoptopenjdk8</code></p>
</li>
<li><p>[AOS/필수] 안드로이드 스튜디오 설치</p>
<p><a href="https://developer.android.com/studio/index.html">https://developer.android.com/studio/index.html</a></p>
</li>
<li><p>[AOS/필수] 환경변수 설정</p>
<p>~/.bash_profile 에 아래의 내용을 입력해주세요.<br>현 : 사용하시는 terminal에 따라 유동적으로 진행해주세요 :)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=<span class="variable">$HOME</span>/Library/Android/sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/emulator</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/platform-tools</span><br></pre></td></tr></table></figure></li>
<li><p>[AOS/필수] SDK 설치</p>
</li>
</ol>
<p>Android Studio &gt; SDK Manager 에서 원하는 SDK 를 선택하여 설치합니다.</p>
<h2 id="Initialize-amp-Launch-Project"><a href="#Initialize-amp-Launch-Project" class="headerlink" title="Initialize &amp; Launch Project"></a>Initialize &amp; Launch Project</h2><h3 id="Initialize"><a href="#Initialize" class="headerlink" title="Initialize"></a>Initialize</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx react-native init moga --template react-native-template-typescript</span><br><span class="line">yarn add mobx</span><br><span class="line">yarn add mobx-react</span><br><span class="line">yarn add @babel/plugin-proposal-decorators -D</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>babel.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">&#x27;@babel/plugin-proposal-decorators&#x27;</span>, &#123;<span class="attr">legacy</span>: <span class="literal">true</span>&#125;],</span><br><span class="line">    [<span class="string">&#x27;@babel/plugin-proposal-class-properties&#x27;</span>, &#123;<span class="attr">loose</span>: <span class="literal">true</span>&#125;],</span><br><span class="line">  ],</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>tsconfig.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">	<span class="string">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="Launch"><a href="#Launch" class="headerlink" title="Launch"></a>Launch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn install</span><br><span class="line">npx pod-install ios</span><br><span class="line">npm run start</span><br><span class="line">npm run android</span><br><span class="line">npm run ios</span><br></pre></td></tr></table></figure>

<h2 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h2><blockquote>
<p>react-native init 실행 후</p>
<p>Installing CocoaPods dependencies 에서 실패하는 케이스</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx pod-install ios</span><br></pre></td></tr></table></figure>

<blockquote>
<p>pod install 실행 시</p>
<p>Installing Flipper-Glog (0.3.6).. 에서 실패하는 케이스</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xcode-select --switch /Applications/Xcode.app</span><br></pre></td></tr></table></figure>

<blockquote>
<p>pod install 실행 시<br><code>git_version&#39;: Failed to extract git version from </code>git –version` (“\nYou have not agreed to the Xcode license agreements, please run ‘sudo xcodebuild -license’ from within a Terminal window to review and agree to the Xcode license agreements.\n”).. 에러 뜨는 케이스</p>
</blockquote>
<p><code>sudo xcodebuild -license</code> 또는 Xcode 실행하여 약관 동의</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xcodebuild -license  <span class="comment">## 또는 Xcode 실행하여 약관 동의</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo와 NexT 테마를 이용하여 내 입맛에 맞는 개발 블로그 만들기</title>
    <url>/2022/01/12/hexo/</url>
    <content><![CDATA[<h1 id="MOTIVATION"><a href="#MOTIVATION" class="headerlink" title="MOTIVATION"></a>MOTIVATION</h1><p>개발 블로그를 시작했을 때부터 tistory를 애용해왔는데, 최근 들어서는 좀 더 <strong>놀이터</strong> 같은 느낌의 블로그를 갖고 싶다는 생각이 들었음.<br>그래서 작년(2021년) 상반기 즈음 사이드 프로젝트로 <em>내 웹페이지를 만들어보자</em>는 계획을 세우게 되었고, 미루고 미루다가 드디어 올해(2022년) 첫 사이드 프로젝트로 다시 꺼내게 되었다.</p>
<h1 id="요구사항"><a href="#요구사항" class="headerlink" title="요구사항"></a>요구사항</h1><p>고객(나)과 개발자(이것도 나)의 입장에서 여러가지 옵션을 재보았던 내용은 아래와 같다.</p>
<p><strong>서버 비용은 들이고 싶지 않아요</strong></p>
<ul>
<li>처음에는 집에 굴러다니는 라즈베리파이에 올릴까 생각도 했는데 의외로 나도 모르는 사이에 전원을 꺼버리는 일이 잦고, update 하려면 서버에 붙어야한다는 점이 너무 번거로워서 몇 번 해보고 포기했다.</li>
<li>정적 웹 사이트를 무료로 deploy할 수 있는 github page 를 선택하게 되었다. 나만 안쓰고 있었어…</li>
</ul>
<p><strong>웹사이트 구성을 직접 하는 건 어려울 것 같은데?</strong></p>
<ul>
<li>이것도 처음에는 내 취지 (<strong>놀이터</strong> 같은 블로그)에 맞게 처음부터 다 구성하려고 했었다. 하지만 막상 손을 대고 보니 고려할 부분이 정말정말 많더라… 검색이나 태그, 카테고리 기능을 추가하려고 하니까 구조를 잡는 것이 너무 부담스럽게 느껴졌다.</li>
<li>검색 성능이 보장되는 태그나 카테고리를 구성하기 위해서 알고리즘과 자료구조부터 찾아봤고, 서버 비용을 들이더라도 elastic search 를 한 번 써볼까 spike도 해봤는데 ㅠㅠ 공부할 내용이 꽤 되는 것은 둘째치고 재미가 없었다. 그래서 얼마안가 포기.</li>
</ul>
<p><strong>정적 웹 사이트 생성기의 도움을 받자</strong></p>
<ul>
<li>github page를 사용하기로 정했을 때 Jekyll로 대표되는 정적 웹 사이트 생성기에 대해서 함께 찾아본 적은 있는데, theme가 모두 마음에 들지 않았던 것 같다.</li>
<li>몇 개월 뒤에 검색 기능 구현에 지쳐서 찬찬히 다시 찾아봤는데, <a href="https://hexo.io/ko/index.html">Hexo</a> 라는 정적 웹 사이트 생성기에 <a href="https://theme-next.js.org/">NexT</a> theme이 눈에 들었다.</li>
</ul>
<p>Hexo 및 NexT 모두 가이드가 잘 되어있는 편이라, 이틀 정도로 github deploy 까지 완료 가능했다.</p>
<h1 id="진행내용"><a href="#진행내용" class="headerlink" title="진행내용"></a>진행내용</h1><h2 id="Hexo-프로젝트-생성-및-구동"><a href="#Hexo-프로젝트-생성-및-구동" class="headerlink" title="Hexo 프로젝트 생성 및 구동"></a>Hexo 프로젝트 생성 및 구동</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h2 id="NexT-테마-적용"><a href="#NexT-테마-적용" class="headerlink" title="NexT 테마 적용"></a>NexT 테마 적용</h2><p>프로젝트 root 경로에서</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>

<p>그리고 hexo/_config.yml 에서</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<h2 id="NexT-테마-커스터마이징-기본"><a href="#NexT-테마-커스터마이징-기본" class="headerlink" title="NexT 테마 커스터마이징 (기본)"></a>NexT 테마 커스터마이징 (기본)</h2><p><a href="https://theme-next.js.org/docs/getting-started/">NexT docs</a>를 참고하여 커스터마이징.<br>대부분의 기본 옵션은 _config.next.yml에 명시되어있어서, flag나 값을 바꿔주는 방식으로 쉽게 변경이 가능하다.</p>
<h2 id="NexT-테마-커스터마이징-고오급"><a href="#NexT-테마-커스터마이징-고오급" class="headerlink" title="NexT 테마 커스터마이징 (고오급)"></a>NexT 테마 커스터마이징 (고오급)</h2><p>style이나 html을 추가하고 싶은 경우, _config.next.yml에서 아래의 항목을 주석 해제하고 해당 경로에 파일을 만들어서 추가하고 싶은 style이나 html을 넣어주면 된다.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">head:</span> <span class="string">source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p>예를 들어 나는 google AdSense를 추가하고 싶었는데, html head 태그 안에 script를 넣을 방법이 필요했다.<br>그럴때 위 의 custom_file_path 에서 head 항목을 주석 해제하고 해당 경로에 head.njk 파일을 만들어준 다음 아래와 같이 입력해주면</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;google-site-verification&quot;</span> <span class="attr">content</span>=<span class="string">&quot;some_value&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">async</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=some_value&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>hexo generate</code>명령어 수행 시 위의 html 코드가 head 하단에 삽입된다.</p>
<p>또, style 커스터마이징도 동일한 방법으로 가능하다.<br>custom_file_path 에서 style 항목을 주석 해제하고 해당 경로에 variables.styl 파일을 만들어준 다음 아래와 같이 입력해주면</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.search-popup</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br></pre></td></tr></table></figure>

<p><code>hexo generate</code>명령어 수행 시 원하는대로 style이 잘 변경된 것을 확인할 수 있다.</p>
<p>+) 위의 방법으로 style 커스터마이징을 하면 전반적인 통일성이 깨지므로 theme 사용의 이점이 퇴색될 수 있을 것 같아서 좀 더 찾아봤는데 (.node_modules/hexo-theme-next 에서 직접 열어볼 수 있다. )<br>기본적으로 font family나 size, 대표 color 는 variable로 관리되고 있음을 확인할 수 있었다. 따라서 테마 색상, 폰트 정도만 변경하고자 한다면 variables.styl에 아래와 같이 써주는게 좋겠다.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$theme</span>-<span class="attribute">color</span> = <span class="number">#FFD460</span>;</span><br><span class="line"><span class="variable">$brand</span>-<span class="attribute">color</span> = <span class="number">#2D4059</span>;</span><br><span class="line"><span class="variable">$text</span>-<span class="attribute">color</span> = <span class="number">#2D4059</span>;</span><br><span class="line"><span class="variable">$font</span>-family-chinese = <span class="string">&#x27;IBM Plex Sans KR&#x27;</span>, sans-serif;</span><br><span class="line"><span class="variable">$font</span>-family-base         = <span class="variable">$font</span>-family-chinese;</span><br><span class="line"><span class="variable">$font</span>-family-logo         = <span class="variable">$font</span>-family-chinese;</span><br><span class="line"><span class="variable">$font</span>-family-headings     = <span class="variable">$font</span>-family-chinese;</span><br><span class="line"><span class="variable">$font</span>-family-posts        = <span class="variable">$font</span>-family-chinese;</span><br></pre></td></tr></table></figure>

<h2 id="github-page-배포"><a href="#github-page-배포" class="headerlink" title="github page 배포"></a>github page 배포</h2><p>_config.yml에 deploy target을 명시한다.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/ga0hyeon/ga0hyeon.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>

<p>deployer를 설치하고</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>배포 명령어를 수행하면 끝이다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>+) github credential 설정이 되어있지 않은 경우 에러 메시지가 발생할 수 있다. 흔한 에러이므로 구글링하면 금방 해결 가능하다.</p>
<h1 id="그리고-더-해야할일"><a href="#그리고-더-해야할일" class="headerlink" title="그리고 더 해야할일"></a>그리고 더 해야할일</h1><ul>
<li><input disabled="" type="checkbox"> github actions로 배포 자동화하기</li>
<li><input disabled="" type="checkbox"> 사이드바에 category tree가 보이게 하고싶다!</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>@Valid @Validated</title>
    <url>/2022/02/18/spring-validation/</url>
    <content><![CDATA[<h1 id="MOTIVATION"><a href="#MOTIVATION" class="headerlink" title="MOTIVATION"></a>MOTIVATION</h1><p>사용자로부터 받아온 Input 값을 우리 시스템에 넣어 처리하기 전에 검증하는 것은 매우 흔한 작업입니다. 볼 필요도 없는 값을 시스템 자원을 써가면서 처리할 필요가 없겠죠. 이러한 검증은 몇 개의 if문과 validation utility로 쉽게 구현이 가능하지만, server framework로 spring을 사용하고 있다면 아래와 같이 더 간결한 코드로 검증을 마칠 수 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAcccount</span></span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size(min = 4, max = 15)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@Valid</span> UserAccount userAccount,</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>&#123;</span><br><span class="line">    service.login(userAccount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>여기까지는 이해가 쉬운데, 실제로 application에 붙이려고 보니 좀 더 자세히 알아야할 내용들이 많았어요. ㅎㅎ<br>이 글에서는 그 내용을 모아서 정리해보려고 합니다.</p>
<h1 id="Valid-그리고-Validated-어노테이션에-관하여"><a href="#Valid-그리고-Validated-어노테이션에-관하여" class="headerlink" title="@Valid 그리고 @Validated 어노테이션에 관하여"></a>@Valid 그리고 @Validated 어노테이션에 관하여</h1><p>ide에서 @Valid를 입력할 때 자동완성 추천 결과에서 @Validated를 보신 적이 있나요?</p>
<p>두 어노테이션에는 다음과 같은 차이점이 있습니다.<br>👉 @Valid는 Java에서 제공됩니다.<br>👉 @Validated는 Spring 프레임워크에서 제공됩니다. @Valid의 기능을 포함하고요.<br>👉 @Valid는 method의 parameter 또는 class field에 사용된 complex object에 적용할 수 있습니다.<br>👉 @Validated는 @Valid가 사용되는 상황 뿐만 아니라, primitive type parameter에 Validation을 추가하고 싶을 때도 사용할 수 있습니다. (하단에서 후술합니다.)<br>👉 @Valid와 달리 @Validated에는 Group을 지정할 수 있습니다.</p>
<p>Validation Group에 대한 내용은 좀 더 찾아봤어요.<br>한 개의 class 안에 여러 개의 제약조건 그룹을 지정하고자 하는 경우에 유용하게 사용할 수 있어보입니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationGroups</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmailChange</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PasswordChange</span> </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeUserAccountRequest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Email(groups = &#123;ValidationGroups.EmailChange.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty(groups = &#123;ValidationGroups.PasswordChange.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeUserEmail</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@Validated(ValidationGroups.EmailChange)</span> ChangeUserAccountRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>&#123;</span><br><span class="line">    service.changeUserEmail(request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeUserPassword</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@Validated(ValidationGroups.PasswordChange)</span> ChangeUserAccountRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>&#123;</span><br><span class="line">    service.changeUserPassword(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Custom-Validator에-관하여"><a href="#Custom-Validator에-관하여" class="headerlink" title="Custom Validator에 관하여"></a>Custom Validator에 관하여</h1><p>제공되는 기본 validator도 충분히 다양하지만, 우리 서비스만의 validator를 만들고 싶을 때도 있습니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Constraint(validatedBy = NicknameValidator.class)</span></span><br><span class="line"><span class="meta">@Target( &#123; ElementType.METHOD, ElementType.FIELD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NickNameConstraint &#123;</span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;유효하지 않은 닉네임 형식입니다.&quot;</span>;</span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NicknameValidator</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">  <span class="title">ConstraintValidator</span>&lt;<span class="title">NickNameConstraint</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NickNameConstraint constraint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(NickNameConstraint constraint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.constraint = constraint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value,</span></span></span><br><span class="line"><span class="params"><span class="function">      ConstraintValidatorContext cxt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value != <span class="keyword">null</span> &amp;&amp; value.matches(<span class="string">&quot;system&#x27;s nickname format&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="⚠-Valid가-primitive-type의-변수-대표적으로-Controller에서-PathVariable로-받아온-값들-에서-동작하지-않아요"><a href="#⚠-Valid가-primitive-type의-변수-대표적으로-Controller에서-PathVariable로-받아온-값들-에서-동작하지-않아요" class="headerlink" title="⚠ @Valid가 primitive type의 변수(대표적으로 Controller에서 PathVariable로 받아온 값들..)에서 동작하지 않아요"></a>⚠ @Valid가 primitive type의 변수(대표적으로 Controller에서 PathVariable로 받아온 값들..)에서 동작하지 않아요</h1><p>이 부분 때문에 많이 헤맸어요. Controller에서 특정 api의 PathVariable에 Validator를 달아주고 싶었는데 이때는 parameter 앞에 @Valid를 붙여주는 것 만으로는 원하는 대로 동작하지 않았습니다.😥 객체로 받아오는 BodyParam에 붙여준 @Valid는 잘 동작했는데 말이죠…</p>
<p>위에서 @Valid와 @Validated의 차이에 정리해둔 것 처럼, PathVariable에 Validator를 적용하기 위해서는 상위 Class에 @Validated 어노테이션을 달아줘야합니다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> YourService yourService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;somethings/&#123;type_code&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;SomeVO&gt;&gt; findSomethingByTypeCode(<span class="meta">@Size(min = 4, max = 6)</span></span><br><span class="line">                                                        <span class="meta">@PathVariable</span> String typeCode) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(yourService.findSomethingByTypeCode(typeCode));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="⚠-Exception-처리-시-주의하세요"><a href="#⚠-Exception-처리-시-주의하세요" class="headerlink" title="⚠ Exception 처리 시 주의하세요"></a>⚠ Exception 처리 시 주의하세요</h1><p>@Valid와 @Validated 어노테이션은 서로 다른 타입의 Error를 던지므로, 공통 처리 모듈에서 약간의 분기 처리가 필요합니다.</p>
<p>@Valid 어노테이션에서는 javax.validation.ConstraintViolationException 을,<br>@Validated 어노테이션에서는 org.springframework.web.bind.MethodArgumentNotValidException 을 발생시킵니다.</p>
<p>어떤 field에서 Error가 발생했는지, 어떤 Error가 발생했는지 두 개의 Exception이 제공하는 field가 다릅니다. 처리 시 주의하세요.</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>@Valid</tag>
        <tag>Spring</tag>
        <tag>Annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>멍청한 내 사이드 프로젝트를 Intelligent 하게 만들어보자</title>
    <url>/2022/03/06/ai-csp/</url>
    <content><![CDATA[<h1 id="MOTIVATION"><a href="#MOTIVATION" class="headerlink" title="MOTIVATION"></a>MOTIVATION</h1><p>취미로 만들고 있는 사이드 프로젝트를 더 멋드러지게 만들기 위해, csp들이 제공하는 몇 가지 AI feature를 붙여보는건 어떨까 이 포스트에서는 각 csp 별 AI, ML 서비스와 spike 내용을 정리해보려고 합니다 👀</p>
<h2 id="AWS"><a href="#AWS" class="headerlink" title="AWS"></a>AWS</h2><p><a href="https://aws.amazon.com/ko/products/?aws-products-all.sort-by=item.additionalFields.productNameLowercase&aws-products-all.sort-order=asc&awsf.re:Invent=*all&awsf.Free%20Tier=*all&awsf.tech-category=tech-category%23ai-ml&awsm.page-aws-products-all=2">AI 카테고리 AWS 제품 목록</a>에서 제 프로젝트에 쓸만한 서비스가 무엇일까 살펴봤어요.</p>
]]></content>
      <tags>
        <tag>AI</tag>
        <tag>Cloud</tag>
      </tags>
  </entry>
</search>
