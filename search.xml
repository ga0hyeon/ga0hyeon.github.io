<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>220826</title>
    <url>/2022/08/26/Diary/220826/</url>
    <content><![CDATA[<h3 id="2022-상반기-회고"><a href="#2022-상반기-회고" class="headerlink" title="2022 상반기 회고"></a>2022 상반기 회고</h3><p>올 초부터 투입되어있던 프로젝트가 얼추 마무리 되었다. 야호~ 철수는 역시 넘나 짜릿하다.<br>정말 많은 것을 배웠다. ㅎㅎ 물론 배운 것의 양보다 놓친 것이 더 많은 것 같아 아쉬운 마음이 들지만, 잘 정리해서 다음 프로젝트에 거름으로 싸들고 가면 되니까 괜찮다. 이번에 아쉬웠던 점을 크게 몇 가지 추려봤고, 남은 하반기에 틈틈히 공부할 키워드도 뽑아봤다.</p>
<h4 id="상태관리-라이브러리의-장단점을-미리-알아둘-걸-그리고-다양한-디자인-패턴을-적용해볼-걸"><a href="#상태관리-라이브러리의-장단점을-미리-알아둘-걸-그리고-다양한-디자인-패턴을-적용해볼-걸" class="headerlink" title="상태관리 라이브러리의 장단점을 미리 알아둘 걸, 그리고 다양한 디자인 패턴을 적용해볼 걸"></a>상태관리 라이브러리의 장단점을 미리 알아둘 걸, 그리고 다양한 디자인 패턴을 적용해볼 걸</h4><p>작년까지 Redux, Recoil을 써봤고 이번에 MobX를 접했다. MobX의 장점을 알고 있기 때문에 MobX를 골랐다기 보다는 Redux, Recoil의 단점 때문에 + MobX도 써보고 싶어서 MobX를 골랐는데 좀 더 전략적으로 선택했어도 좋았을 것 같다. 장점을 뽑아서 N개의 상태관리 라이브러리를 용도에 맞게 섞어서 써본다거나, 아니면 한 개의 상태관리 라이브러리를 사용하더라도 용도에 맞게 여러 디자인 패턴을 적용해볼 걸 하는 아쉬움이 있다.</p>
<h4 id="네이티브-코드를-미리-만져볼-걸-적어도-도구-사용법만이라도-알았으면-좋았을-걸"><a href="#네이티브-코드를-미리-만져볼-걸-적어도-도구-사용법만이라도-알았으면-좋았을-걸" class="headerlink" title="네이티브 코드를 미리 만져볼 걸, 적어도 도구 사용법만이라도 알았으면 좋았을 걸"></a>네이티브 코드를 미리 만져볼 걸, 적어도 도구 사용법만이라도 알았으면 좋았을 걸</h4><p>내가 스스로 만들어본 마지막 앱은 cocos2d와 C#으로 만든 모바일 게임이었는데, 부끄럽지만 그때는 명령어 하나로 뚝딱 apk가 나오기에 ‘역시 프레임워크 최고! 네이티브의 시대는 지고 있구나’ 라고 생각했다. 하지만 이번에 크로스플랫폼 앱 프레임워크를 사용해서 앱을 개발하면서 정말 많이 들었던 생각이 ‘미리 네이티브 개발 좀 해볼걸’ 이었다. 성능을 끌어올리기 위해서 / 커스텀 기능을 구현하기 위해서 / 외부 sdk 또는 라이브러리를 적용하기 위해서는 필수로 네이티브를 건드려야했는데, 프로젝트 일정 중간에 딥하게 파기에는 시간도 없을 뿐더러 이미 네이티브 담당자가 있는 상황이라 애매한 너낌쓰.. 미리 네이티브 코드를 경험해본 적이 있었다면 좀 더 능동적으로 문제를 해결할 수 있었을 것 같아서 아쉬웠다.</p>
<h4 id="공통화-공통화-공통화-그리고-말잘하는-연습을-할-걸"><a href="#공통화-공통화-공통화-그리고-말잘하는-연습을-할-걸" class="headerlink" title="공통화 공통화 공통화.. 그리고 말잘하는 연습을 할 걸"></a>공통화 공통화 공통화.. 그리고 말잘하는 연습을 할 걸</h4><p>개인적으로 이전의 프로젝트들에서 컴포넌트/유틸 공통화에 대한 부족함을 느꼈고, 이번 프로젝트에서 열심히 만회했다고 생각한다. 하지만 공통화 해야하는 것이 단순 컴포넌트/유틸 (= 코드조각) 뿐만이 아니라는 것을 이번에 배웠다… 이전에는 컨벤션을 공유 받고 따르는게 내 메인 롤이었다면 이번 프로젝트에서는 컨벤션을 정리하고 가이드하는게 메인 롤이 되면서 공통화 해야할 항목에 대한 시야가 강제로(?) 넓어진게 이유인 것 같다. 들여쓰기나 변수명명법처럼 정적인 것 부터 api 주소 설계, 클래스 설계 처럼 상황에 따라 가변적인 것들까지 일종의 룰이 필요하다는 것을 이번에서야 절실히 깨달았다 ㅋㅋ 쓰고보니 너무나 당연한 이야기이지만… 그리고 이 룰을 서로에게 설득하기 위해, 정리된 룰을 신규 투입 인원에게 효과적으로 인계하기 위해 ‘이유’와 ‘예시’를 명확하게 말로 풀어낼 수 있는 능력이 내게 부족하다는 점도 깨달았다.</p>
<h4 id="좀-더-똑똑하게-판단하고-소리낼-걸"><a href="#좀-더-똑똑하게-판단하고-소리낼-걸" class="headerlink" title="좀 더 똑똑하게 판단하고 소리낼 걸"></a>좀 더 똑똑하게 판단하고 소리낼 걸</h4><p>요거는 개발 외적인 반성이다. 나는 내가 개발하고 싶은 요건을 집어가는 것을 선호하는데, 이번 프로젝트에서는 그 외에 내가 해야만 하는 일이 생기면서 두 가지를 병행하게 되었다. 물론 내 선택이라 후회하거나 징징거리고 싶은건 아니다 ^_^ 일의 양이 늘어나기는 했지만 원래 일하던 방식도 최선은 아니었으니, 좀 더 효율적으로 일하면 overwork 하지 않을 수 있었을 것 같은데… 아쉽게도 이번에는 ‘내가 일을 하는’게 아니라 ‘일이 나를 끌고가는’ 상황이 벌어지게 되었다. 내가 어느 시간대에 어떤 방식으로 (재택 / 출근) 어떤 업무를 처리할 때 효율이 가장 높은 지, 각각의 할 일이 어느정도의 우선 순위를 가지는 지를 똑똑하게 판단하고 소리내었으면 좋았으련만, 소심하게 판단을 일임하거나 보류하거나 쉬쉬한게 결과적으로는 내 정신 &amp; 육체 건강의 피폐함을 초래한 것 같아 정말 아쉬웠다.</p>
<h3 id="하반기-키워드"><a href="#하반기-키워드" class="headerlink" title="하반기 키워드"></a>하반기 키워드</h3><ul>
<li>디자인 패턴</li>
<li>Redux Recoil MobX</li>
<li>Android / iOS 개발 및 마켓 배포</li>
<li>Gitlab 활용 BP</li>
<li>내가 참여할 수 있는 의사결정에는 능동적으로</li>
<li>말을 잘하는 연습 (책 읽기?)</li>
</ul>
<p>고생했고, 다음에는 더 잘할 수 있을거라 믿는당 나자신 화이팅</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>220906</title>
    <url>/2022/09/06/Diary/220906/</url>
    <content><![CDATA[<h3 id="나에게-부족한-점"><a href="#나에게-부족한-점" class="headerlink" title="나에게 부족한 점"></a>나에게 부족한 점</h3><ul>
<li>실속있게 지식을 공유하는 방법</li>
<li>맥락이 있는 글쓰기</li>
</ul>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>220915</title>
    <url>/2022/09/15/Diary/220915/</url>
    <content><![CDATA[<h3 id="어떤점을-보완하고싶은지"><a href="#어떤점을-보완하고싶은지" class="headerlink" title="어떤점을 보완하고싶은지"></a>어떤점을 보완하고싶은지</h3><ul>
<li>각 기술의 장단점에 대한 직관을 기르고 싶다<ul>
<li>이거 기르려면 무조건 경험을 넓혀야할 것 같아서 ㅎㅎ<ul>
<li>쿠버네티스 공부를 시작했다</li>
<li>서비스 기획 UX/UI 발표 제안 같은 영역도 진지하게 임해볼까</li>
</ul>
</li>
</ul>
</li>
<li>내가 알고있는 영역과 내가 추측하고 있는 영역 (얼마나 자신있게 추측하는 지도 또 다르겠지)을 잘 버무려서 말하는 능력을 기르고 싶다<ul>
<li>실속없이 알고있는 것을 너무 디테일하게 다 털어서 이야기 해버리거나 (밑천이 드러남)</li>
<li>아는 것도 제대로 말 못하거나 (어버버..)</li>
<li>확신의 정도가 다른 추론을 남에게 말하면서 강약 조절실패하거나</li>
<li>등등 자괴감 모먼트가 종종 있다…… 멋쟁이가 되고싶다 ㅠㅠ</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>230118</title>
    <url>/2023/01/18/Diary/230113/</url>
    <content><![CDATA[<h3 id="어느-방향을-커리어를-쌓고싶은지"><a href="#어느-방향을-커리어를-쌓고싶은지" class="headerlink" title="어느 방향을 커리어를 쌓고싶은지"></a>어느 방향을 커리어를 쌓고싶은지</h3><p>다양한 역할의 사람들과 협업하다보면 다른 역할에 대한 흥미가 생길 때가 많다.  </p>
<p>나는 이런 흥미를 사이드 프로젝트를 통해 해소하는 편인데, 이런 경험이 업무에 도움이 될 때도 있지만 당연하게도 대부분은 겉핥기식라서 오히려 잘못된 지식 얻거나 착각을 하게 되기도 한다. </p>
<p>가장 자주 하는 착각은 “나 이정도면 이것도 잘하는데?” 인데, 아주 위험한 (하지만 매 번 또 하게 되는) 생각이다. 특히 요즘에는 적은 작업만으로도 툴이나 프레임워크의 도움을 받아 꽤 그럴싸한 결과물을 얻을 수 있어서 그런지 착각하기 더 좋은 시대인 것 같다. 내부의 철학을 이해하기보다는 겉핥기로 두어번 써보는게 다라서 기억도 깊게 남지 않고, 잘안풀리기 시작하면 마음이 시들해져서 여기저기 또 다른 새로운 것을 찾아다닌다.</p>
<p>그렇다고 여기저기 한 눈 팔지 않고 특정 분야를 파서 1등을 할 수 있을 것 같냐 하면 그것도 자신이 없다. 나는 여전히 레퍼런스를 참고해서 ‘쓰는 사람’으로 일하고 있고 (’만드는 사람’ 이 아닌), 뭔가를 완벽히 알아냈다는 성취감을 느낄 때보다 계속해서 모르는게 늘어가는 느낌이 들어 막막할 때가 더 많기 때문이다.</p>
<p>특히 작년 하반기에 내가 다른사람보다 적은 노력으로도 잘해내는게 뭔지, 그걸하면서 성취 + 수익을 얻으려면 해야하는 일이 뭔지, 그 일을 가장 좋은 환경에서 할 수 있는 조직은 어디인지 고민이 많았다. 답이 없는 고민이라 생각하다보면 어영부영 시간이 훌쩍가버리는 것을 알기 때문에 고민을 하는 것 조차 사치스러운 기분이 들기 일쑤… 올해는 계획적으로 접근하자 😌</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>230122</title>
    <url>/2023/01/22/Diary/230122/</url>
    <content><![CDATA[<h3 id="어떤-사람으로-보여지고-싶은지-어떤-사람이-되고-싶은지"><a href="#어떤-사람으로-보여지고-싶은지-어떤-사람이-되고-싶은지" class="headerlink" title="어떤 사람으로 보여지고 싶은지, 어떤 사람이 되고 싶은지"></a>어떤 사람으로 보여지고 싶은지, 어떤 사람이 되고 싶은지</h3><p>매번 고민하는 주제인데<br>주변에 정적 콘텐츠로 표출하는 모습과 실제 모습에 갭이 있는 사람들이 많다. 편집과 선택 과정에서 본인이 보여지고 싶은 모습 위주로 필터링했기 때문이라고 생각한다.<br>그런데 그 사람들이 필터링에서 선택하지 않은 모습들 (고급스럽지 않거나, 유쾌하지 않거나, 예쁘지 않거나 등등)이 나는 더 매력적으로 느껴질 때가 많아서 나를 표현하는 콘텐츠를 만들때에 이런저런 고민이 많아졌다. 다른사람의 콘텐츠를 봤을 때 느낀 것 처럼, 멋지지 않은 면들 (현실)을 담고 싶기도 하지만 또 빼버리고 싶기도 하고…<br>내가 되고 싶은 사람은 멋있는 일 못난 일 두루 경험해서 단단해진 사람인데, 보여지고 싶은 사람과 모습과 갭이 생기니까 되고 싶은 사람이 되는 것에도 시간이 부족한데 보여지고 싶은 사람인척 하느라 시간을 다 써버리게 되는 느낌이 들때도 있다.</p>
<p>언젠가 두 모습이 같아지는 날도 올까? ㅎㅎ </p>
<h3 id="회고의-중요성은-이제-알았고-그-다음은"><a href="#회고의-중요성은-이제-알았고-그-다음은" class="headerlink" title="회고의 중요성은 이제 알았고, 그 다음은??"></a>회고의 중요성은 이제 알았고, 그 다음은??</h3><p>작년부터 개인적으로 작성했던 회고를 모으고 있다.<br>한 번에 쭉 써내려가는게 아니라 며칠을 두고 내가 그 시점에 느끼는 바를 충분히 담으려고 노력해서 썼는데 나중에 쭉 훑어보니 기술적인 글보다 더 큰 도움이 되는 것 같다.<br>추측하건대 아마도 기술에 대한 견해는 계속해서 넓어지는 방향으로만 발전하지만 스스로에 대한 성찰은 해도해도 제자리 걸음 같은 느낌이 들어서 그런거 아닐까? </p>
<p>이제 회고의 중요성은 알겠는데, 그 다음은 회고할 때 도출하는 ‘다음엔 이렇게 해보자’를 실제로 추적관리하는게 중요한 것 같다.<br>작년 회고에 앞으로 이렇게 하자~ 고 적어둔건 참 많은데 회고 적자마자 까먹어버린게 대부분이다 ㅎㅎ </p>
<p>회고를 한 뒤에는 action item에 대해 주기적으로 관리를 하자. 이렇게 쓴것도 또 까먹는건 아닌가 모르지만 ^^</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>[주말엔 엄빠랑 놀자] 멍청한 내 사이드 프로젝트에 MLOps 적용하기</title>
    <url>/2022/03/06/Tech/AI_MLOps/ai-csp/</url>
    <content><![CDATA[<h1 id="MOTIVATION"><a href="#MOTIVATION" class="headerlink" title="MOTIVATION"></a>MOTIVATION</h1><p>작년 상반기에 구상하여 하반기에 기획 &amp; 개발하고, 연말에 공모전에 냈던 나의 애증의 사이드 프로젝트 ‘주말엔 엄빠랑 놀자’…<br>퇴근하고 저녁, 주말에만 개발하느라 시간도 부족했는데 또 발등에 불 떨어질 때까지 미루는 바람에 실제로는 한 달안에 우다다 만들어서<br>코드도 못생기고 기능도 허접해서 다시 꺼내보고 싶지 않았는데… 요즘 문득 다시 만들어볼까 생각이 들어서 꺼내봤다.</p>
<p>기억과 그대로 소스코드는 지저분했지만, 리소스가 아깝기도 하고 작년 하반기 대비 내 실력이 얼마나 늘었는지도 볼 겸 모바일앱으로 전환을 해보기로 마음먹었다.</p>
<p>그리고 이 꼬질꼬질한 친구를 더 멋드러지게 만들기 위해, 작년에 기획만 하고 우선순위에 밀려 구현되지 못했던 장소 추천 기능을 넣어보려고한다.</p>
<p>이 포스트에서는 어떻게 추천 서비스를 1.구상하고 2.조사하고 3.이해하고 4.구현했는지 정리할 것이다.</p>
<h1 id="구상하기"><a href="#구상하기" class="headerlink" title="구상하기"></a>구상하기</h1><h2 id="당신과-유사한-사용자가-본-컨텐츠-vs-당신이-관심있었던-컨텐츠와-유사한-컨텐츠"><a href="#당신과-유사한-사용자가-본-컨텐츠-vs-당신이-관심있었던-컨텐츠와-유사한-컨텐츠" class="headerlink" title="당신과 유사한 사용자가 본 컨텐츠 vs 당신이 관심있었던 컨텐츠와 유사한 컨텐츠"></a>당신과 유사한 사용자가 본 컨텐츠 vs 당신이 관심있었던 컨텐츠와 유사한 컨텐츠</h2><p><strong>사용자 기반의 추천</strong> / <strong>컨텐츠 기반의 추천</strong> 둘 중 어느 방향으로 추천을 구현할까 고민이 있었는데<br>나와 유사한 사용자가 어떤 선택을 내렸는가에 기반하여 추천을 하려면 일단 일정 규모 이상의 사용자 풀이 확보되어야한다는 점이 마음에 걸렸고,</p>
<ul>
<li>사용자 풀을 방대하게 늘리고 싶은 욕심이 없고</li>
<li>소수의 충성스러운 사용자를 확보하고 싶은</li>
</ul>
<p>나로서는 <strong>컨텐츠 기반의 추천</strong>을 선택하는 것이 유리하다고 판단했다.</p>
<p>따라서 일차적으로는 내 컨텐츠의 카테고리를 분류하고, 사용자로부터 선호하는 카테고리를 수집한 것이 작년까지의 작업 내용이다.</p>
<h2 id="그런데-어느-컨텐츠에-관심이-있으셨죠"><a href="#그런데-어느-컨텐츠에-관심이-있으셨죠" class="headerlink" title="그런데 어느 컨텐츠에 관심이 있으셨죠?"></a>그런데 어느 컨텐츠에 관심이 있으셨죠?</h2><p>위에서 언급했듯이 컨텐츠 기반으로 추천을 하겠다는 결정과 초기 작업은 작년에 이미 해둔 상태이지만, 이번에 좀 더 잘 다듬어보려고 고심하면서 심화 기능을 생각하자니 뭔가 문제가 좀 있었다.<br><img src="/images/playwith_preference_draft.png" alt="애증의 사이드 프로젝트"></p>
<ul>
<li>초기에 선택한 카테고리에 대한 흥미도가 시간이 지남에 따라 변함<br>그렇다고 사용자가 스스로 취향이 바뀌었다는 것을 인지하고 -&gt; 정보 설정 화면에 진입해서 -&gt; 카테고리를 다시 고르게 하는 것은 검색창의 필터 기능이랑 다른점이 무엇인지? “추천”이라고 쓰고 “검색”이라고 읽어야하나?</li>
<li>제한된 카테고리 내에서 선택을 하다보니 세밀한 취향 선택이 어렵고, 당연히 추천에 대한 만족도도 떨어짐<br>그렇다고 카테고리 수를 늘리는 것은 UX 피로도를 높이고 심미성도 떨어지는데…</li>
</ul>
<p><strong>요약하자면</strong> 사용자에게 ‘너의 취향을 골라보라’고 카테고리 몇 가지를 제시하고 입력받는 것 만으로는 사용자의 취향을 자세히 알 수가 없다는 점이 걱정되기 시작했다.<br><strong>결론적으로</strong>, 사용자가 서비스 내에서 어떤 행동을 했는지 로깅하고, 해당 로그를 활용하여 사용자가 어떤 정보에 흥미를 느끼는지 파악하는 파이프라인을 마련해야할 필요가 있었다.</p>
<h2 id="그렇다면-어떤-정보를-수집하고-수집된-정보를-어떻게-취향의-근거로-활용할까"><a href="#그렇다면-어떤-정보를-수집하고-수집된-정보를-어떻게-취향의-근거로-활용할까" class="headerlink" title="그렇다면 어떤 정보를 수집하고, 수집된 정보를 어떻게 취향의 근거로 활용할까?"></a>그렇다면 어떤 정보를 수집하고, 수집된 정보를 어떻게 취향의 근거로 활용할까?</h2><p>인스타 추천알고리즘이나 유튭 추천알고리즘이 어떤 정보를 수집해간다더라 이것저것 들은 이야기는 있지만, 실제로 내부가 어찌 되어있는지 자세히 알 방도도 없을 뿐더러 내 시간과 비용으로 그 정도 구현은 어렵기 때문에 우선은 몇 가지 action에 대한 측정값을 수집하는 정도로만 먼저 데이터를 모아보기로 했다.</p>
<p>의미가 있다고 판단한 action은 주로 조회나 화면과의 상호작용 정도이다. 한 가지 나름 신경썼다고 생각하는 특이점으로는 서비스 자체가 메인 추천화면 -&gt; 장소 상세화면 -&gt; 장소 상세화면의 세부 정보별 상호작용 (장소 내용 자세히보기, 주변관광지 추천, 지도연동 등등)과 같이 안쪽으로 타고 들어와야만 정보의 질이 높아지는 구조로, 유용한 정보를 얻고자 하는 사용자라면 장소상세 화면 안쪽까지 들어와야만 한다는 점에 착안하여 <strong>화면 depth에 대한 가중치를 부여</strong>하려고한다는 점이다.</p>
<h2 id="취향에-맞는-컨텐츠를-제공하기-위해-선행되어야할-작업은-뭘까-컨텐츠-카테고리를-정확하고-자세하게-정하는-것"><a href="#취향에-맞는-컨텐츠를-제공하기-위해-선행되어야할-작업은-뭘까-컨텐츠-카테고리를-정확하고-자세하게-정하는-것" class="headerlink" title="취향에 맞는 컨텐츠를 제공하기 위해 선행되어야할 작업은 뭘까? 컨텐츠 카테고리를 정확하고 자세하게 정하는 것?"></a>취향에 맞는 컨텐츠를 제공하기 위해 선행되어야할 작업은 뭘까? 컨텐츠 카테고리를 정확하고 자세하게 정하는 것?</h2><p>작년 버전의 소스에서는 박물관, 미술관 등의 N가지 카테고리를 대분류로 장소 별 특색에 따라 하위의 분류를 얼추 정해놓았다. 관광공사에서 제공하는 api를 사용하는 것도 프로젝트의 큰 목적이었기때문에, 관광공사에서 제공하는 카테고리를 거의 그대로 가져다 썼다.</p>
<p>이 다중 트리 구조의 카테고리가 내가 만들고자하는 추천 서비스에 적합한 데이터 구조일까? 제공되는 카테고리가 마음에 들지 않는데, 시간과 노력을 들여 좀 더 세밀하게 / 정확하게 트리의 리프 카테고리까지 검수해야할까? (실제로 작년에는 이 검수 작업을 하려고 했었다)<br>약간의 고민 만으로도 이 접근은 잘못되었다는 것을 알 수 있었다. 트리 구조의 자세한 분류 체계는 내가 구현하고자 하는 추천 시스템에서 상대적으로 덜 중요한 작업이다.</p>
<p>대신 내가 장소의 feature로 고려할 수 있는 항목이 무엇이 있을지 고민하면 되겠다고 판단했다.</p>
<p><strong>결론적으로</strong>, 나는 제목의 “취향에 맞는 컨텐츠를 제공하기 위해 선행되어야할 작업은 뭘까?”에 대한 답을 “장소에 대한 feature를 정하자”로 내린 것이다.</p>
<p>내가 타겟이라고 생각했던 유저층의 마음으로 웹서핑을 하며 몇 가지 feature 를 뽑아보니, 원래부터도 카테고리로 사용하고 있던 <strong>현장학습 지식의 분야</strong>(역사/과학/미술 등등) 외에도 <strong>적정 연령대</strong>, <strong>대중교통 가능 여부</strong> 등등 꽤 여러가지 feature가 뽑혔다.</p>
<h1 id="조사하기"><a href="#조사하기" class="headerlink" title="조사하기"></a>조사하기</h1><h2 id="사용자의-action-이력을-수집하는-방법은-뭐가-있을까"><a href="#사용자의-action-이력을-수집하는-방법은-뭐가-있을까" class="headerlink" title="사용자의 action 이력을 수집하는 방법은 뭐가 있을까?"></a>사용자의 action 이력을 수집하는 방법은 뭐가 있을까?</h2><p>어플리케이션에 Action 로깅을 심는 방법에 대해 이것저것 구글링해봤다. 웹에서는 이전부터 많이 쓰였어서 그런지, 구글링 결과가 아주 방대했고 기획 &amp; 마케팅 초짜인 나는 어떤 서비스를 사용해야할 지 찾기 어려웠다. 결국엔 그냥 여러 아티클과 블로그를 둘러보며 감이라도 잡는 수 밖에 없었다 😅</p>
<ul>
<li><a href="https://medium.com/daria-blog/mlops-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C-7ba8d9aae221">MLOps란 무엇일까?</a>: 와! 요즘 블로그에서 많이 보이는 복붙된 지식이 준초콜릿 같은거라면 이런 고디바 같은 글도 있다 ㅠㅠ 감격</li>
<li><a href="https://brunch.co.kr/@userhabit/52">행동 데이터 분석가를 위한 안내서 - 나(또는 우리 회사)에 맞는 애널리틱스 선택하기</a> : 결론은 광고글인 것 같긴한데, 어떤 솔루션이 유명한지조차 모르는 나에게는 도움이 되었다</li>
<li><a href="https://www.itworld.co.kr/news/191844">Apple의 앱 추적 투명성 정책</a> : 어우 언제부턴가 추적을 허용하겠냐는 팝업이 떠서 당연히 매번 거부했는데 ㅎㅎ 정책이었다니! 너무 무지했던 것 같다;</li>
<li><a href="https://www.adjust.com/ko/blog/opt-in-design-for-apple-app-tracking-transparency-att-ios14/">위에 언급된 ATT로인해 UX적으로 고려해야하는 것</a>: 관련은 없는데 재밌어서 기록한다. 역시 UX는 재밌다.</li>
</ul>
<h2 id="사용자의-action-이력과-가중치를-넘기면-이-사용자의-feature-별-관심도를-뽑아주는-서비스나-모델이-뭐가-있을까"><a href="#사용자의-action-이력과-가중치를-넘기면-이-사용자의-feature-별-관심도를-뽑아주는-서비스나-모델이-뭐가-있을까" class="headerlink" title="사용자의 action 이력과 가중치를 넘기면 이 사용자의 feature 별 관심도를 뽑아주는 서비스나 모델이 뭐가 있을까?"></a>사용자의 action 이력과 가중치를 넘기면 이 사용자의 feature 별 관심도를 뽑아주는 서비스나 모델이 뭐가 있을까?</h2><h2 id="특정-사용자의-feature-별-관심도를-넘기면-그-사용자에게-추천할만한-데이터를-뽑아주는-서비스나-모델이-뭐가-있을까"><a href="#특정-사용자의-feature-별-관심도를-넘기면-그-사용자에게-추천할만한-데이터를-뽑아주는-서비스나-모델이-뭐가-있을까" class="headerlink" title="특정 사용자의 feature 별 관심도를 넘기면 그 사용자에게 추천할만한 데이터를 뽑아주는 서비스나 모델이 뭐가 있을까?"></a>특정 사용자의 feature 별 관심도를 넘기면 그 사용자에게 추천할만한 데이터를 뽑아주는 서비스나 모델이 뭐가 있을까?</h2>]]></content>
      <categories>
        <category>Tech</category>
        <category>MLOps</category>
      </categories>
      <tags>
        <tag>MLOps</tag>
        <tag>AI</tag>
        <tag>Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>javscript OCR 라이브러리로 제품정보 인식하기</title>
    <url>/2022/05/22/Tech/AI_MLOps/ocr/</url>
    <content><![CDATA[<h1 id="AWS-Textract"><a href="#AWS-Textract" class="headerlink" title="AWS Textract"></a>AWS Textract</h1><p>처음에는 AWS Textract를 사용하려고 하였으나… 지원 언어에 한국어가 아직 없는 관계로 패스</p>
<h1 id="Javascript-OCR-라이브러리들"><a href="#Javascript-OCR-라이브러리들" class="headerlink" title="Javascript OCR 라이브러리들"></a>Javascript OCR 라이브러리들</h1><p>직접 구현하기로 마음을 먹고 javascript OCR 라이브러리를 찾아보니 생각보다 굉장히 많았다.<br><a href="https://openbase.com/categories/js/best-nodejs-ocr-libraries">https://openbase.com/categories/js/best-nodejs-ocr-libraries</a><br>1위인 Tesseract를 선택했다.</p>
<h1 id="input으로-어떤-이미지가-들어올까"><a href="#input으로-어떤-이미지가-들어올까" class="headerlink" title="input으로 어떤 이미지가 들어올까?"></a>input으로 어떤 이미지가 들어올까?</h1><p>일반 사용자에게 “제품 모델명을 촬영해달라”고 한다면 어느 부분을 찍을지 생각해봤다.<br>얼마 고민해보지 않아도 제품 어딘가에 모델명이 쓰여있는 경우를 모두 고려해야한다는 결론이 났다.</p>
<ul>
<li>단순 텍스트</li>
<li>행과 열이 선으로 구분된 테이블 형태의 상세정보</li>
<li>행과 열이 선으로 구분되지 않은 테이블 형태의 상세정보</li>
</ul>
<p>가이드 문서에서 제공되는 아래의 기본 코드로 위의 세가지 케이스를 각각 인식해본 결과…</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> worker = <span class="title function_">createWorker</span>(&#123;</span><br><span class="line">  <span class="attr">logger</span>: <span class="function">(<span class="params">m</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(m),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">recognize</span> = (<span class="params">file: File</span>) =&gt; &#123;</span><br><span class="line">  (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> worker.<span class="title function_">load</span>();</span><br><span class="line">    <span class="keyword">await</span> worker.<span class="title function_">loadLanguage</span>(<span class="string">&quot;kor+eng&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> worker.<span class="title function_">initialize</span>(<span class="string">&quot;kor+eng&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      <span class="attr">data</span>: &#123; text &#125;,</span><br><span class="line">    &#125; = <span class="keyword">await</span> worker.<span class="title function_">recognize</span>(file);</span><br><span class="line">    <span class="title function_">setResult</span>(text);</span><br><span class="line">    <span class="keyword">await</span> worker.<span class="title function_">terminate</span>();</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/images/ocr_result_1.png" alt="인식결과_1"><br>나~~~~름 뭔가가 인식되는 것을 볼 수 있었다. 나름… 하지만 제품정보를 “인식”했다고 하기에는 정확도가 민망할 정도로 낮아서, 보완할 포인트를 정리해봤다.</p>
<ul>
<li>먼지가 글자로 인식되어, 먼지가 많은 사진을 인식하는 데에 수 분이 소요된다<ul>
<li>의도한 것은 아니나, 단순 텍스트 인식을 위해 촬영한 이미지 (공유기)에 먼지가 많아서 이걸 다 글자로 인식하는 바람에 정확도 0% 처리 시간 N분이라는 결과가… 나왔다</li>
</ul>
</li>
<li>input 사진의 size가 불필요하게 크다</li>
<li>글자와 배경만 구분하면 될텐데… 이미지가 컬러일 필요가 없어보인다</li>
<li>글자가 있는 영역 외의 Object는 인식에서 제외할 필요가 있어보인다</li>
<li>테이블 형식의 input 데이터는 사실 행-열 조합 만으로 매우 큰 정보를 제공하는데, 인식 결과에서는 그 내용을 활용하지 못한다</li>
</ul>
<p>도출된 보완점 중 <strong>먼지</strong> 문제와 <strong>input size</strong> 문제, <strong>grayscale</strong> 문제는 쉽게 해결 가능해보이고,<br><strong>Object</strong> 문제와 <strong>Table</strong> 문제는 detection 관련해서 좀 더 찾아볼 필요가 있어보였다.</p>
<p>아무튼. 쓸만하게 만들기 위해서는 전처리가 필요하다.</p>
<p>구글링해보니 인식률을 높이는 방법으로 몇 가지 전처리가 추천되고 있다. 다들 비슷하게 생각하고 있다 ㅋㅋㅋ 재밌음<br><a href="https://stackoverflow.com/questions/9480013/image-processing-to-improve-tesseract-ocr-accuracy">https://stackoverflow.com/questions/9480013/image-processing-to-improve-tesseract-ocr-accuracy</a></p>
<h1 id="전처리를-추가하자"><a href="#전처리를-추가하자" class="headerlink" title="전처리를 추가하자"></a>전처리를 추가하자</h1><h2 id="openCV-js를-붙여보자"><a href="#openCV-js를-붙여보자" class="headerlink" title="openCV.js를 붙여보자"></a>openCV.js를 붙여보자</h2><p>javascript에서 영상처리를 하는 방법에 대해 열심히 구글링했지만… 쉽지 않았다. cdn을 통해서나 js를 받아 직접 script를 붙여서 사용하도록 가이드하는 오픈소스는 종종 보였으나 npm 라이브러리는 쓸만한게 없었다. 아쉬운대로 openCV.js를 받아서 써보기로 했다.</p>
<ol>
<li><p><a href="https://docs.opencv.org/3.4/d0/d84/tutorial_js_usage.html">https://docs.opencv.org/3.4/d0/d84/tutorial_js_usage.html</a> 를 참고해서 4.5.5버전의 openCV.zip를 다운로드한다.</p>
</li>
<li><p>zip 폴더를 풀어 public 폴더에 넣고, 폴더명은 openCV_4.5.5로 변경했다. 그리고 index.html에 아래와 같이 js를 붙여준다. js가 로드된 이후 부터는 글로벌하게 선언된 <code>cv</code> 변수를 이용해서 openCV를 사용할 수 있다.</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;openCV_4.5.5/opencv.js&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">onload</span>=<span class="string">&quot;onOpenCvReady();&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="이미지를-흑백으로-변환하자"><a href="#이미지를-흑백으로-변환하자" class="headerlink" title="이미지를 흑백으로 변환하자"></a>이미지를 흑백으로 변환하자</h2><p><a href="https://docs.opencv.org/3.4/db/d64/tutorial_js_colorspaces.html">https://docs.opencv.org/3.4/db/d64/tutorial_js_colorspaces.html</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> src = cv.<span class="title function_">imread</span>(<span class="string">&quot;canvasInput&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> dst = <span class="keyword">new</span> cv.<span class="title class_">Mat</span>();</span><br><span class="line">cv.<span class="title function_">cvtColor</span>(src, dst, cv.<span class="property">COLOR_RGBA2GRAY</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tech</category>
        <category>OCR</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>[JavaScript] 비동기 프로그래밍</title>
    <url>/2022/04/05/Tech/JavaScript/asynchronous-programming/</url>
    <content><![CDATA[<h1 id="이-글을-쓰게된-이유"><a href="#이-글을-쓰게된-이유" class="headerlink" title="이 글을 쓰게된 이유"></a>이 글을 쓰게된 이유</h1><p>나는 웹을 경험한 기간이 짧다. 그래서 감으로만 익히고 넘어간 개념도 많다. 그 중 하나가 JavaScript에서의 비동기 처리이다. 우선은 비동기처리 패턴을 시간 순으로 나열해보고, 마지막으로는 전부터 궁금했던 (하지만 시간이 없다는 핑계로 그냥 넘어갔던 ㅋㅋㅋ) 동기함수에서 비동기 함수를 호출할 때의 코드 패턴에 대해 정리하려고 한다.</p>
<h1 id="비동기처리-패턴의-역사"><a href="#비동기처리-패턴의-역사" class="headerlink" title="비동기처리 패턴의 역사"></a>비동기처리 패턴의 역사</h1><p>웹을 경험한 기간이 짧아서 아쉬운 점은 실제로 내가 예전의 구린 웹을 써본 적이 없다는 것이다 ㅠㅠ 이건 비단 웹 뿐만 아니라 프로그래밍의 거의 모든 분야에서 그렇긴 하지만. 실제로 불편했던 기억이 있으면 예를 들어 설명하기 더 좋지 않았을까 생각한다.<br>아무튼 나는 경험한 바가 없기 때문에, 비동기처리 패턴이 예전엔 어떻게 구렸는 지 좀 찾아봤다.</p>
<h2 id="Callback-패턴"><a href="#Callback-패턴" class="headerlink" title="Callback 패턴"></a>Callback 패턴</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">doSomethingAsynchronously</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">asyncFuncWithCallback</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">doSomethng</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>이건 안써봐도 별로이게 생겼다. 순차적으로 비동기 처리를 원하는 경우, Callback 안에 Callback 안에 Callback.. 을 넣어줘야한다.</p>
<h2 id="Promise-패턴-then-catch-finally"><a href="#Promise-패턴-then-catch-finally" class="headerlink" title="Promise 패턴 (then, catch, finally)"></a>Promise 패턴 (then, catch, finally)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">asyncFunc</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//Promise is resolved</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//Promise is rejected</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//Promise is resolved or rejected</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>ES6에 등장했다는 이 패턴에서는, 순차적으로 비동기 처리를 원하는 경우 then then then.. 으로 Promise를 return하고 다음 then에서 처리하는 방식으로 엮을 수 있다.<br>위에 것 보다는 편해보인다. 하지만 뒤쪽의 then 절에서 res에 뭐가 들어있는 지 따라가는 것이 쉽지 않다.</p>
<h2 id="async-await-패턴"><a href="#async-await-패턴" class="headerlink" title="async await 패턴"></a>async await 패턴</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title function_">asyncFunc1</span>();</span><br><span class="line"><span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">asyncFunc2</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1, res2);</span><br></pre></td></tr></table></figure>

<p>ES8에 등장한 이 패턴은, 확실히 위의 두 패턴보다 가독성이 좋아 보인다.</p>
<h1 id="동기함수에서-비동기-함수를-호출하고-싶은데…"><a href="#동기함수에서-비동기-함수를-호출하고-싶은데…" class="headerlink" title="동기함수에서 비동기 함수를 호출하고 싶은데…"></a>동기함수에서 비동기 함수를 호출하고 싶은데…</h1><p>예를 들어 화면 쪽 로직에 이런 기능이 있다.</p>
<p>‘제출하기 버튼을 누르면 제출 api를 호출하게 해주세요’</p>
<p>물론 제출하기 버튼에 제출 api 호출 함수를 넣으면 된다. 바로 동작하는 것을 볼 수 있다. 그런데 여기에 type checking 이 들어가면 버튼의 onClick 핸들러는 동기 함수를 받기를 원하므로, 비동기인 api 호출 함수를 넣으면 정적 소스 분석툴에서 type이 맞지 않다고 징징거린다.</p>
<p>그래서 처음에는 이런식의 코드를 짰다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">groupedAsyncFunc</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title function_">asyncFunc1</span>();</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">asyncFunc2</span>();</span><br><span class="line">  <span class="keyword">return</span> res1 + res2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">    groupedAsyncFunc.then((res) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">      doSomething(res);</span></span><br><span class="line"><span class="language-xml">    &#125;);</span></span><br><span class="line"><span class="language-xml">  &#125;&#125;</span></span><br><span class="line"><span class="language-xml">/&gt;</span>;</span><br></pre></td></tr></table></figure>

<p>다건의 연속된 비동기 처리는 async await로 보기 좋게 짜더라도, 마지막에 한번은 동기로 마무리하려면 then을 써주어야한다고 생각한 것이다. 여유를 갖고 검색해볼 시간이 없었던 것 같다.</p>
<p>다행히 시간을 내어 이 내용을 구글링한 끝에, 두 가지의 대안을 찾았다.</p>
<ol>
<li>비동기 함수 호출 시 void 붙여주기</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">groupedAsyncFunc</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title function_">asyncFunc1</span>();</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">asyncFunc2</span>();</span><br><span class="line">  <span class="keyword">return</span> res1 + res2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> void groupedAsyncFunc()&#125; /&gt;</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>IIFE (즉시실행함수) 패턴 사용하기</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">groupedAsyncFunc</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title function_">asyncFunc1</span>();</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">asyncFunc2</span>();</span><br><span class="line">  <span class="keyword">return</span> res1 + res2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">    (async () =&gt; await groupedAsyncFunc())();</span></span><br><span class="line"><span class="language-xml">  &#125;&#125;</span></span><br><span class="line"><span class="language-xml">/&gt;</span>;</span><br></pre></td></tr></table></figure>

<p>개인적으로는 1안의 void 가 가독성이 좋아서 1안을 사용하기로 했으나, 찾아보니 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/async_function">2안을 사용하도록 가이드</a>하는 경우도 꽤 있었다. 나는 몰랐지만, IIFE는 이 케이스 뿐만 아니라 javascript 진영에서 원래 널리 쓰고 있는 패턴이며, 변수의 호이스팅 때문에 원하는 대로 동작하지 않는 케이스를 방지해준다는 큰 장점이 있다고 한다. 이 내용을 접했을 때, 내가 <em>동기함수에서 비동기 함수를 호출</em> 하고 싶다는 내 작은 요건에 너무 오버되는 패턴을 찾은 것 같다는 생각을 했다. ㅋㅋㅋ 굳이 이걸 쓸 필요가 없어보였다. Scope 처리가 너무나 당연한 환경에서 웹 개발을 하고있는 나에게는 별로 매력적이지 않아보였기 때문이다. 그래서 2안은 IIFE 개념에 대해 접할 수 있었던 것에만 의의를 두고, 사용하지는 않기로 했다.</p>
<h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>비동기 action의 결과를 명시적으로 기다리지 않는 경우 void 키워드를 붙여주자.</p>
]]></content>
      <categories>
        <category>Tech</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot + MySQL + JPA + Flyway 셋업하고 REST api 만들기</title>
    <url>/2022/11/15/Tech/SpringBoot/setting-JPA/</url>
    <content><![CDATA[<h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>나는 JPA를 써본적이 없당</p>
<p>JPA를 사용해본/하고있는 사람들에게 JPA를 설명해달라고 하면 “하… 너넨 이런거 하지마라 🚬” 느낌으로다가 말해주곤 하는데</p>
<p>하지 말라고 하면 더 해보고 싶은 법이다. 왜 하지말라는건데~~~~</p>
<p>그래서 사이드 프로젝트 BE를 JPA로 만들기로 결정<del>!</del>!</p>
<h1 id="Spring-Initializer-로-프로젝트-뼈대-생성"><a href="#Spring-Initializer-로-프로젝트-뼈대-생성" class="headerlink" title="Spring Initializer 로 프로젝트 뼈대 생성"></a>Spring Initializer 로 프로젝트 뼈대 생성</h1><p><a href="https://start.spring.io/">Initializer</a>로 프로젝트 뼈대를 생성한다.</p>
<p>언어 옵션 중 Kotlin이 아주 잠깐 궁금했으나 잘 참고 Java를 고른다 ㅎㅎ 왜냐면 아직 Java도 아직 잘모름 🤦‍♀️<br>Dependency는 각자 필요한 것을 선택하면 되는데 나는 Lombok, JPA, Flyway, Web 정도가 필요하다.</p>
<p>+) 개발자인데 GUI가 좋다고 하면 왠지 주눅이 들어서 잘 말하고 다니지 않지만, Initializer를 처음 찾았을때 너무 기분이 좋았다 ㅋㅋㅋ ㅠㅠ</p>
<h1 id="Application-yaml-설정"><a href="#Application-yaml-설정" class="headerlink" title="Application.yaml 설정"></a>Application.yaml 설정</h1><p>Initializer로 만든 폴더 안에는 application.properties가 기본으로 생성되어있으나 나는 가독성 때문에 yaml 포맷을 선호하므로 application.yaml 파일을 만든다.</p>
<p>위에서 만들어준 프로젝트에 MySQL을 붙이고 JPA, flyway를 사용하기 위해 구글링 구글링..</p>
<p><a href="https://www.baeldung.com/spring-data-jpa-run-app-without-db">baeldung 아티클</a> 에서 database 없이 JPA 를 붙이고, 에러가 나지 않도록 줘야하는 옵션값을 설명해준다.<br>( JPA에 대해 정말 지식이 없어서 단순히 메소드 명으로 쿼리 만들어주는 그런 친구인줄로 알았는데, DDL 자동 생성 기능도 있었다.<br>여기저기 포스트를 찾아보기도 하고 혼자서도 생각해보니 오히려 불편할 것 같다는 생각이 들어 이 기능은 끄기로 한다. )</p>
<p>아래와 같이 application.yaml를 설정해주면 <code>MySQL - JPA - flyway</code> 는 잘 연동이 된다.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">flyway:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">locations:</span> <span class="string">classpath:db/migration</span></span><br><span class="line">    <span class="attr">schemas:</span> <span class="string">coworksaga</span></span><br><span class="line">    <span class="attr">baseline-on-migrate:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&amp;db-url</span> <span class="string">jdbc:mysql://localhost:3306/coworksaga?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Seoul&amp;createDatabaseIfNotExist=true&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">&amp;db-user</span> <span class="string">coworksaga</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&amp;db-pwd</span> <span class="string">root1234</span></span><br><span class="line">    <span class="attr">create-schemas:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">validate</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">format-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">use-sql-comments:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">temp:</span></span><br><span class="line">          <span class="attr">use_jdbc_metadata_defaults:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">*db-url</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">*db-user</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">*db-pwd</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org.hibernate.SQL:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="attr">org.hibernate.type:</span> <span class="string">TRACE</span></span><br></pre></td></tr></table></figure>

<p>+) yaml 쓰면서 깨달은점</p>
<ul>
<li>&amp;, * 페어로 변수를 선언하고 불러다 쓸 수 있다. 굿굿</li>
<li>database가 없을때 자동으로 생성하도록 하는 옵션을 검색하는게 어려웠다. 어떤사람은 hibernate.ddl-auto 라고 하고 어떤 사람은 create-schemas라고 하고 ㅎㅎ 결론은 jdbc url에 <code>createDatabaseIfNotExist=true</code> 요 옵션을 주는걸로.</li>
</ul>
<p>+) yaml 쓰면서 궁금한점</p>
<ul>
<li>비슷한 카테고리 같은데 왜 depth가 왜 다른걸까? jpa.hibernate랑 jpa.properties.hibernate 처럼.</li>
<li>url username passwork 이거 다 datasource, flyway에 두 번씩 쓰게 되어있는데 ㅠ 변수로 정리해두긴 했으나.. 두 옵션이 한 값을 바라보도록 바로 설정은 안되는걸까?</li>
</ul>
<h1 id="Layer-별-폴더-트리-생성"><a href="#Layer-별-폴더-트리-생성" class="headerlink" title="Layer 별 폴더 트리 생성"></a>Layer 별 폴더 트리 생성</h1><p>이제 로컬에 서버를 띄울 수 있는 상태가 되었으니 실제로 기능 개발을 할 수 있도록 폴더를 생성하자.</p>
<p>매번 Layer (Controller, Service, Repository) 별로 폴더링을 했는데 문득 다른 사람들은 어쩌고 있나 싶어 찾아보니 Entity/Domain별로 묶는 방법도 쓰이고 있다. 음 폴더로 묶으면 한 패키지가 되는데.. 패키지랑 맥락이 비슷한 개념은 Layer보단 Entity/Domain인 것 같기도 하고 고민이 되었지만… 실제로 패키지별로 따로 묶어서 배포/공유하는 것도 아니니 생각보다 엄청나게 메리트가 있을 것 같지 않다. 이번에도 Layer로 쪼개도록 한다.</p>
<h1 id="첫번째-flyway-스크립트와-REST-api-만들기"><a href="#첫번째-flyway-스크립트와-REST-api-만들기" class="headerlink" title="첫번째 flyway 스크립트와 REST api 만들기"></a>첫번째 flyway 스크립트와 REST api 만들기</h1><p>위에 yaml에 써있기는 한데 지금 만들고 있는 건 사이드프로젝트 중 하나였던 cowork-saga의 BE 이다. 만들 당시에는 node.js로 급하게 만들어서 썼는데 마음에 썩 들지 않았다… ㅎㅎ 그리고 그마저도 처음엔 장고였고 나의 pyhon 생산성이 심각히 떨어지는 것을 깨닫고 포기했던 것…  그래도 예전에 좀 써봤으니 할 수 있지 않을까 했는데 충격이었다 ^^</p>
<p>암튼 요 BE는 signalling server의 기능을 수행하기 위해 socket 통신도 필요하고, 메타 정보를 조회하고 저장하기 위해 REST 통신도 필요하다. 우선은 익숙한 REST api 부터 만들도록 한다.</p>
<p>uuid를 넘기면 workspace 이름을 조회하는 api를 만들어볼건데, 그러려면 우선 workspace 테이블을 생성해주어야겠다.</p>
<ul>
<li><p>V0_1_0__create_workspaces.sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> workspaces (</span><br><span class="line">	workspace_id <span class="type">INT</span> UNSIGNED auto_increment <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">	workspace_name <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	workspace_uuid <span class="type">varchar</span>(<span class="number">36</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	workspace_password <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NULL</span>,</span><br><span class="line">	created_at DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> NOW(),</span><br><span class="line">	updated_at DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> NOW() <span class="keyword">ON</span> <span class="keyword">UPDATE</span> NOW()</span><br><span class="line">)</span><br><span class="line">ENGINE<span class="operator">=</span>InnoDB</span><br><span class="line"><span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4</span><br><span class="line"><span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure></li>
<li><p>V0_1_1__insert_workspaces.sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> workspaces</span><br><span class="line">(workspace_id, workspace_name, workspace_uuid, workspace_password, created_at, updated_at)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, &quot;HYEON&#x27;s workspace&quot;, <span class="string">&#x27;2a2ba386-1ca1-49c6-8573-076916ac6139&#x27;</span>, <span class="string">&#x27;Password&#x27;</span>, now(), now());</span><br></pre></td></tr></table></figure></li>
</ul>
<p>이제 Entity를 생성해준다.</p>
<ul>
<li><p>Workspace</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;workspaces&quot;)</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Workspace</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Column(name = &quot;uuid&quot;, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String uuid;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String createdAt;</span><br><span class="line">    <span class="keyword">private</span> String updatedAt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>그리고 차례대로 Repository, Service, Controller를 만들어준다.</p>
<ul>
<li><p>WorkspaceRepository</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WorkspaceRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Workspace, Integer&gt; &#123;</span><br><span class="line">    Workspace <span class="title function_">findByUuid</span><span class="params">(String uuid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>WorkspaceService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkspaceService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WorkspaceRepository workspaceRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Workspace <span class="title function_">getWorkspace</span><span class="params">(String uuid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workspaceRepository.findByUuid(uuid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>WorkspaceController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkspaceController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WorkspaceService workspaceService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/workspaces/&#123;uuid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Workspace <span class="title function_">workspaceDetail</span><span class="params">(<span class="meta">@PathVariable</span> <span class="meta">@Length(min=16, max=16)</span> String uuid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workspaceService.getWorkspace(uuid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>+) 쿼리 결과는 정상적이지만 api 응답이 그냥  <code>&#123;&#125;</code> 로 떨어질 때</p>
<ul>
<li>return 한 Entity에 public getter가 없어서 그럴 수 있다. <a href="https://stackoverflow.com/questions/49117622/spring-rest-controller-returns-empty-json-iterable-data-structure-why">참고</a></li>
</ul>
<p>이제 뼈대는 얼추 갖추게 된 것 같다. 다음 api 부터는 유용한 annotation 좀 찾고 aspect 붙이면서 보완해나가면 될 듯. 👩‍💻</p>
<h1 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h1><ul>
<li>처음부터 해보면 머리에 확실히 잘 들오는 것 같다. get api 하나 만드는데 생각보다 많은 것을 배웠다!</li>
<li>JPA 아직은 왜 “하… 너넨 이런거 하지마라 🚬” 하는건 지 못느꼈다. 더 써봐야지.</li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>MySQL</tag>
        <tag>JPA</tag>
        <tag>Flyway</tag>
      </tags>
  </entry>
  <entry>
    <title>[Spring] @Valid @Validated에 대해 알아보자</title>
    <url>/2022/02/18/Tech/SpringBoot/spring-validation/</url>
    <content><![CDATA[<h1 id="MOTIVATION"><a href="#MOTIVATION" class="headerlink" title="MOTIVATION"></a>MOTIVATION</h1><p>사용자로부터 받아온 Input 값을 우리 시스템에 넣어 처리하기 전에 검증하는 것은 매우 흔한 작업임. 볼 필요도 없는 값을 시스템 자원을 써가면서 처리할 필요가 없음.<br>이러한 검증은 몇 개의 if문과 validation utility로 물론 쉽게 구현이 가능하지만, server framework로 spring을 사용하고 있다면 아래와 같이 더 간결한 코드로 검증을 마칠 수 있음.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAcccount</span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size(min = 4, max = 15)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@Valid</span> UserAccount userAccount,</span></span><br><span class="line"><span class="params">)</span>&#123;</span><br><span class="line">    service.login(userAccount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>여기까지는 이해가 쉬운데, 실제로 application에 붙이려고 보니 좀 더 자세히 알아야할 내용들이 많았음. –<br>이 글에서는 그 내용을 모아서 정리해봄.</p>
<h1 id="Valid-그리고-Validated-어노테이션에-관하여"><a href="#Valid-그리고-Validated-어노테이션에-관하여" class="headerlink" title="@Valid 그리고 @Validated 어노테이션에 관하여"></a>@Valid 그리고 @Validated 어노테이션에 관하여</h1><p>ide에서 @Valid를 입력할 때 자동완성 추천 결과에서 @Validated이 뜨던데, 처음에는 지나쳤었다.</p>
<p>@Valid를 잘 써보고자 구글링을 하니 두 어노테이션에는 다음과 같은 차이점이 있다는 내용이 아주 많이 나왔다.</p>
<p>👉 @Valid는 Java에서 제공됨<br>👉 @Validated는 Spring 프레임워크에서 제공되며, @Valid의 기능을 포함함<br>👉 @Valid는 method의 parameter 또는 class field에 사용된 complex object에 적용할 수 있음<br>👉 @Validated는 @Valid가 사용되는 상황 뿐만 아니라, primitive type parameter에 Validation을 추가하고 싶을 때도 사용할 수 있음 (하단에서 후술)<br>👉 @Valid와 달리 @Validated에는 Group을 지정할 수 있음. Validation Group에 대한 내용은 아래에 좀 더 자세히 정리함</p>
<h1 id="Validation-Group에-대하여-그리고-이거-정말-꿀기능-맞을까"><a href="#Validation-Group에-대하여-그리고-이거-정말-꿀기능-맞을까" class="headerlink" title="Validation Group에 대하여. 그리고 이거 정말 꿀기능 맞을까?"></a>Validation Group에 대하여. 그리고 이거 정말 꿀기능 맞을까?</h1><p>한 개의 class 안에 여러 개의 제약조건 그룹을 지정하고자 하는 경우에 유용하게 사용할 수 있음.<br>제약조건마다, 즉 Request마다 VO를 모두 따로따로 만들어야 하는건가 절망에 빠져있을 때 찾은 내용이라 매우 꿀기능처럼 느껴졌음. (꿀인지 아닌지 아직 엄청 많이 써보지는 않아서 모름 ^_^)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationGroups</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmailChange</span> &#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PasswordChange</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeUserAccountRequest</span> &#123;</span><br><span class="line">    <span class="meta">@Email(groups = &#123;ValidationGroups.EmailChange.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty(groups = &#123;ValidationGroups.PasswordChange.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeUserEmail</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@Validated(ValidationGroups.EmailChange)</span> ChangeUserAccountRequest request,</span></span><br><span class="line"><span class="params">)</span>&#123;</span><br><span class="line">    service.changeUserEmail(request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeUserPassword</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@Validated(ValidationGroups.PasswordChange)</span> ChangeUserAccountRequest request,</span></span><br><span class="line"><span class="params">)</span>&#123;</span><br><span class="line">    service.changeUserPassword(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>+) 개인적인 의견<br>VO, DTO 객체 한 개만으로도 여러개의 constraint를 제어할 수 있어서 엄청난 꿀 기능처럼 보이기도 하지만, 지나치게 많아지면 가독성에는 문제가 조금 있는 것 같다… 🤣</p>
<h1 id="Custom-Validator에-관하여"><a href="#Custom-Validator에-관하여" class="headerlink" title="Custom Validator에 관하여"></a>Custom Validator에 관하여</h1><p>제공되는 기본 validator도 충분히 다양하지만, 우리 서비스만의 validator를 만들고 싶을 때도 있음</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Constraint(validatedBy = NicknameValidator.class)</span></span><br><span class="line"><span class="meta">@Target( &#123; ElementType.METHOD, ElementType.FIELD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NickNameConstraint &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;유효하지 않은 닉네임 형식입니다.&quot;</span>;</span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NicknameValidator</span> <span class="keyword">implements</span></span><br><span class="line">  <span class="title class_">ConstraintValidator</span>&lt;NickNameConstraint, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NickNameConstraint constraint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(NickNameConstraint constraint)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.constraint = constraint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value,</span></span><br><span class="line"><span class="params">      ConstraintValidatorContext cxt)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; value.matches(<span class="string">&quot;system&#x27;s nickname format&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>+) 개인적인 의견<br>신기하게도 custom validator는 아직 단점을 잘 모르겠다…! 지나치게 많이 선언하는거야 당연히 안좋은거고, 프로젝트 내에서 통용되는 몇 가지 validation 로직을 공통화 해놓으면 코드가 부드럽게 읽히는 magic이…<br>( 단점을 발견하게되면 충격받아서 흑역사 지우러 바로 위의 문장 수정하러 올 듯 …. ㅎㅎ )</p>
<h1 id="Trouble-Shooting🔥"><a href="#Trouble-Shooting🔥" class="headerlink" title="Trouble Shooting🔥"></a>Trouble Shooting🔥</h1><h2 id="⚠-Valid가-primitive-type의-변수-대표적으로-Controller에서-PathVariable로-받아온-값들-에서-동작하지-않음"><a href="#⚠-Valid가-primitive-type의-변수-대표적으로-Controller에서-PathVariable로-받아온-값들-에서-동작하지-않음" class="headerlink" title="⚠ @Valid가 primitive type의 변수(대표적으로 Controller에서 PathVariable로 받아온 값들..)에서 동작하지 않음"></a>⚠ @Valid가 primitive type의 변수(대표적으로 Controller에서 PathVariable로 받아온 값들..)에서 동작하지 않음</h2><p>이 부분 때문에 많이 헤맸음 ㅠㅠㅠㅜㅜ<br>Controller에서 특정 api의 PathVariable에 Validator를 달아주고 싶었는데, 이때는 parameter 앞에 @Valid를 붙여주는 것 만으로는 원하는 대로 동작하지 않았음 😥 WHY?!?!!<br>객체로 받아오는 BodyParam에 붙여준 @Valid는 잘 동작했는디…</p>
<p>.<br>.<br>.</p>
<p>두구두구</p>
<p>위에서 @Valid와 @Validated의 차이에 스포해둔 것 처럼, PathVariable에 Validator를 적용하기 위해서는 상위 Class에 @Validated 어노테이션을 달아줘야함</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> YourService yourService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;somethings/&#123;type_code&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;SomeVO&gt;&gt; <span class="title function_">findSomethingByTypeCode</span><span class="params">(<span class="meta">@Size(min = 4, max = 6)</span></span></span><br><span class="line"><span class="params">                                                        <span class="meta">@PathVariable</span> String typeCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(yourService.findSomethingByTypeCode(typeCode));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="⚠-Exception-처리-시-주의"><a href="#⚠-Exception-처리-시-주의" class="headerlink" title="⚠ Exception 처리 시 주의"></a>⚠ Exception 처리 시 주의</h2><p>@Valid와 @Validated 어노테이션은 서로 다른 타입의 Error를 던지므로, 공통 처리 모듈에서 약간의 분기 처리가 필요함</p>
<p>@Valid 어노테이션에서는 javax.validation.ConstraintViolationException 을,<br>@Validated 어노테이션에서는 org.springframework.web.bind.MethodArgumentNotValidException 을 발생시킴</p>
<p>어떤 field에서 Error가 발생했는지, 어떤 Error가 발생했는지 두 개의 Exception이 제공하는 field가 달라서 공통화에 시간이 조금 들었음, 참고하면 좋을 듯 :)</p>
<h2 id="⚠-달기-쉬운-만큼-중복하여-validate-하지-않도록-주의"><a href="#⚠-달기-쉬운-만큼-중복하여-validate-하지-않도록-주의" class="headerlink" title="⚠ 달기 쉬운 만큼, 중복하여 validate 하지 않도록 주의"></a>⚠ 달기 쉬운 만큼, 중복하여 validate 하지 않도록 주의</h2><p>이 부분은 지금도 계속 어떻게 하면 중복을 최소화할까 고민하며 코딩하고 있는 내용임.</p>
<p>코드로 적혀있는 로직은 중복되어있으면 쉽게 눈에 밟히는데, annotation은 무심코 넘어가게 되는 경우가 많아서 valid도 무심코 여러번 태우게되는 경우가 있었음.<br>정석적인 답은 “가장 안쪽의 로직에만 적용하라” 겠지만 이 메소드 저 메소드 서로 공유하는 상황에서 그러기가 쉽지가 않다. 🤣<br>“이 값은 보장되어서 들어온 값이니까 믿어도 돼” 라는 flag를 함께 넘겨줄 수 있을까? 이것저것 고민해봐야지!</p>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>@Valid</tag>
        <tag>Spring</tag>
        <tag>Annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>[React Native] iOS 에서만 특정 도메인의 이미지 uri가 보이지 않을 때</title>
    <url>/2022/04/08/Tech/ReactNative/RN-ios-image-not-showing/</url>
    <content><![CDATA[<h1 id="WIP-iOS-에서만-특정-도메인의-이미지-uri가-보이지-않을-때"><a href="#WIP-iOS-에서만-특정-도메인의-이미지-uri가-보이지-않을-때" class="headerlink" title="WIP: iOS 에서만 특정 도메인의 이미지 uri가 보이지 않을 때"></a>WIP: iOS 에서만 특정 도메인의 이미지 uri가 보이지 않을 때</h1><p>현상은 다음과 같다. 예를 들어 특정 도메인이 <em><a href="https://some.url/">https://some.url</a></em> 이라고 하면</p>
<ul>
<li>AOS에서는 <em><a href="https://some.url/">https://some.url</a></em> 로 uri 지정한 Image 컴포넌트가 아주 잘 보인다.</li>
<li>iOS에서는 완전히 동일한 React Native 소스인데 <em><a href="https://some.url/">https://some.url</a></em>를 바라보고 있는 Image 컴포넌트가 안그려진다.</li>
<li>iOS에서 사파리로 <em><a href="https://some.url/">https://some.url</a></em> 접근시에는 잘보인다.</li>
<li>iOS에서 다른 도메인 이미지로 Image 컴포넌트를 그려보면 잘 보인다.</li>
</ul>
<p>네트워크 적으로 뭔가 막힌거같은데… 아직 못찾았다 ㅠㅠ</p>
]]></content>
      <categories>
        <category>Tech</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>[React Native] 여러 개의 자식 요소를 가운데 정렬하고 싶을 때</title>
    <url>/2022/04/08/Tech/ReactNative/RN-publishing-align-center/</url>
    <content><![CDATA[<h1 id="여러-개의-자식-요소를-가운데-정렬하고-싶을-때"><a href="#여러-개의-자식-요소를-가운데-정렬하고-싶을-때" class="headerlink" title="여러 개의 자식 요소를 가운데 정렬하고 싶을 때"></a>여러 개의 자식 요소를 가운데 정렬하고 싶을 때</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> styles = <span class="title class_">StyleSheet</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">vertical</span>: &#123;</span><br><span class="line">    <span class="attr">justifyContent</span>: <span class="string">&quot;center&quot;</span>, <span class="comment">//자식 요소가 horizontally 가운데 정렬된다.</span></span><br><span class="line">    <span class="attr">alignItems</span>: <span class="string">&quot;center&quot;</span>, <span class="comment">//자식 요소가 vertically 가운데 정렬된다.</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tech</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>[React Native] 플랫폼별로 디자인을 달리 하고 싶을 때</title>
    <url>/2022/04/08/Tech/ReactNative/RN-publishing-branch-os/</url>
    <content><![CDATA[<h1 id="플랫폼별로-디자인을-달리-하고-싶을-때"><a href="#플랫폼별로-디자인을-달리-하고-싶을-때" class="headerlink" title="플랫폼별로 디자인을 달리 하고 싶을 때"></a>플랫폼별로 디자인을 달리 하고 싶을 때</h1><p><code>react-native</code> 패키지의 <code>Platform</code> 모듈을 사용하자</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> styles = <span class="title class_">StyleSheet</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">pagination_wrapper</span>: &#123;</span><br><span class="line">    <span class="attr">position</span>: <span class="string">&quot;absolute&quot;</span>,</span><br><span class="line">    <span class="attr">left</span>: width / <span class="number">2</span> - <span class="number">100</span>,</span><br><span class="line">    ...<span class="title class_">Platform</span>.<span class="title function_">select</span>(&#123;</span><br><span class="line">      <span class="attr">ios</span>: &#123;</span><br><span class="line">        <span class="attr">top</span>: height + <span class="number">70</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">android</span>: &#123;</span><br><span class="line">        <span class="attr">top</span>: height + <span class="number">75</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tech</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>[React Native] 스크롤 영역의 스크롤 바를 가리고 싶을 때</title>
    <url>/2022/04/12/Tech/ReactNative/RN-publishing-hide-scrollbar/</url>
    <content><![CDATA[<h1 id="스크롤-영역의-스크롤-바를-가리고-싶을-때"><a href="#스크롤-영역의-스크롤-바를-가리고-싶을-때" class="headerlink" title="스크롤 영역의 스크롤 바를 가리고 싶을 때"></a>스크롤 영역의 스크롤 바를 가리고 싶을 때</h1><p>ScrollView, FlatList에게 아래의 props를 내려주자.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">showsVerticalScrollIndicator=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">showsHorizontalScrollIndicator=&#123;<span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tech</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>[React Native] ScrollView의 특정 요소를 Sticky 하게 만들고 싶을 때</title>
    <url>/2022/04/10/Tech/ReactNative/RN-publishing-scrollview-sticky/</url>
    <content><![CDATA[<h1 id="ScrollView의-특정-요소를-Sticky-하게-만들고-싶을-때"><a href="#ScrollView의-특정-요소를-Sticky-하게-만들고-싶을-때" class="headerlink" title="ScrollView의 특정 요소를 Sticky 하게 만들고 싶을 때"></a>ScrollView의 특정 요소를 Sticky 하게 만들고 싶을 때</h1><p>스크롤 하다가 Stick 되었으면 하는 자식 요소의 index를 stickyHeaderIndices prop를 통해 명시해주자.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">ScrollView</span> stickyHeaderIndices=&#123;[<span class="number">0</span>]&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">FirstView</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">SecondView</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ThirdView</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">FourthView</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">ScrollView</span>&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tech</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>[React Native] 맥북 개발환경을 세팅하자</title>
    <url>/2022/01/13/Tech/ReactNative/RN-setup/</url>
    <content><![CDATA[<h1 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h1><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><ol>
<li><p>Node 12 이상 설치<br><code>brew install node</code></p>
</li>
<li><p>Watchman 설치<br><code>brew install watchman</code></p>
</li>
<li><p>[iOS/필수] Xcode 설치</p>
<p>appStore에서 설치하면 됩니다. (용량이 12기가라 매우 느립니다!)</p>
</li>
<li><p>[iOS/선택]<br>Xcode를 실행하여 Command Line Tools도 가장 최신으로 다운로드 하세요.</p>
<p><img src="https://reactnative.dev/assets/images/GettingStartedXcodeCommandLineTools-8259be8d3ab8575bec2b71988163c850.png"></p>
</li>
<li><p>[iOS/선택] 시뮬레이터 추가 설치<br><strong>Xcode &gt; Preferences…</strong> 에서 <strong>Components</strong> 탭 선택 후<br>원하는 iOS 시뮬레이터를 선택하여 추가할 수 있습니다.<br>현 : 지금 최신 Xcode를 받으면 iPhone13 (iOS15.2) 가 default로 설치되는 것 같아요</p>
</li>
<li><p>[iOS/필수] CocoaPods 설치</p>
<p><code>sudo gem install cocoapods</code></p>
</li>
<li><p>[AOS/필수] JDK 설치</p>
<p>Jdk8 이상이 필요합니다.<br><code>brew install --cask adoptopenjdk/openjdk/adoptopenjdk8</code></p>
</li>
<li><p>[AOS/필수] 안드로이드 스튜디오 설치</p>
<p><a href="https://developer.android.com/studio/index.html">https://developer.android.com/studio/index.html</a></p>
</li>
<li><p>[AOS/필수] 환경변수 설정</p>
<p>~/.bash_profile 에 아래의 내용을 입력해주세요.<br>현 : 사용하시는 terminal에 따라 유동적으로 진행해주세요 :)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=<span class="variable">$HOME</span>/Library/Android/sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/emulator</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/platform-tools</span><br></pre></td></tr></table></figure></li>
<li><p>[AOS/필수] SDK 설치</p>
</li>
</ol>
<p>Android Studio &gt; SDK Manager 에서 원하는 SDK 를 선택하여 설치합니다.</p>
<h2 id="Initialize-amp-Launch-Project"><a href="#Initialize-amp-Launch-Project" class="headerlink" title="Initialize &amp; Launch Project"></a>Initialize &amp; Launch Project</h2><h3 id="Initialize"><a href="#Initialize" class="headerlink" title="Initialize"></a>Initialize</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx react-native init moga --template react-native-template-typescript</span><br><span class="line">yarn add mobx</span><br><span class="line">yarn add mobx-react</span><br><span class="line">yarn add @babel/plugin-proposal-decorators -D</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>babel.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">&#x27;@babel/plugin-proposal-decorators&#x27;</span>, &#123;<span class="attr">legacy</span>: <span class="literal">true</span>&#125;],</span><br><span class="line">    [<span class="string">&#x27;@babel/plugin-proposal-class-properties&#x27;</span>, &#123;<span class="attr">loose</span>: <span class="literal">true</span>&#125;],</span><br><span class="line">  ],</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>tsconfig.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">	<span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="Launch"><a href="#Launch" class="headerlink" title="Launch"></a>Launch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn install</span><br><span class="line">npx pod-install ios</span><br><span class="line">npm run start</span><br><span class="line">npm run android</span><br><span class="line">npm run ios</span><br></pre></td></tr></table></figure>

<h2 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h2><blockquote>
<p>react-native init 실행 후</p>
<p>Installing CocoaPods dependencies 에서 실패하는 케이스</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx pod-install ios</span><br></pre></td></tr></table></figure>

<blockquote>
<p>pod install 실행 시</p>
<p>Installing Flipper-Glog (0.3.6).. 에서 실패하는 케이스</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xcode-select --switch /Applications/Xcode.app</span><br></pre></td></tr></table></figure>

<blockquote>
<p>pod install 실행 시<br><code>git_version&#39;: Failed to extract git version from </code>git –version` (“\nYou have not agreed to the Xcode license agreements, please run ‘sudo xcodebuild -license’ from within a Terminal window to review and agree to the Xcode license agreements.\n”).. 에러 뜨는 케이스</p>
</blockquote>
<p><code>sudo xcodebuild -license</code> 또는 Xcode 실행하여 약관 동의</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xcodebuild -license  <span class="comment">## 또는 Xcode 실행하여 약관 동의</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tech</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>[React] React CDN 버전으로 나를 표현하는 이력 페이지를 만들자</title>
    <url>/2022/01/22/ToyProjects/Blog/Resume/</url>
    <content><![CDATA[<h1 id="MOTIVATION"><a href="#MOTIVATION" class="headerlink" title="MOTIVATION"></a>MOTIVATION</h1><p>처음 블로그를 deploy할 때, About Me 페이지는 다음에 더 손봐야지~ 하고 대충 만들었었는데요.</p>
<p>한 페이지에 내가 잘하는 것, 하고싶은 것, 했던 것에 대한 정보를 짜임새 있게 보여주기가 어렵더라구요… 감히 html 쪼가리가 나를 표현한다니! 라는 생각도 들고요 ㅋㅋㅋ<br>다른 한 편으로는 나에 대해서 정리하고 돌아보는 시간을 계속 미루고 싶었던 것 같기도 합니다.</p>
<p>어떻게 하면 짜임새 있게 나를 표현할 수 있을까 고민했던 내용을 기록해볼게요.</p>
<h1 id="계획"><a href="#계획" class="headerlink" title="계획"></a>계획</h1><p>우선 보여주고 싶은 정보의 특성에 따라 보여주는 방식도 달랐으면 했습니다.</p>
<ul>
<li>이력은 타임라인</li>
<li>기술스택은 관련 직군이라면 알아볼 수 있을 만큼만 간결하게 뱃지로</li>
<li>사이드 플젝 진행이력은 신뢰가 가도록 다양한 정보를 담아서</li>
<li>성격이 드러나는 짧은 소개글</li>
</ul>
<p>또, 화면과 인터랙션해서 보여줘야하는 추가정보인지 / 처음부터 보여져야하는 필수정보인지에 따라서도 구현 방식이 달라져야 했구요.</p>
<ul>
<li>추가정보라면 툴팁과 아코디언을 적절히 사용해서 화면이 복잡해 보이지 얺도록</li>
<li>필수정보라면 font style과 margin, padding 을 조절하여 화면이 복잡해 보이지 않도록</li>
</ul>
<p>🤔 뜬금없지만, 역시 내 product를 만든다고 생각하고 UX를 고민하는 작업은 항상 재미있는 것 같아요. 잘하고 싶어져서 더 알아보고, 더 알아보면 더 잘하게 되고…</p>
<h1 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h1><p>이전 글에서 언급했듯 이 블로그는 Hexo와 Next theme 그리고 약간의 customizing으로 구현되어있는데요. 기존의 틀을 그대로 활용하여 마크다운 추가만으로도 이력 페이지를 꾸밀 수는 있겠지만 그걸로는 원하는 기능을 모두 구현할 수 없었고, 고민하지 않고 React의 도움을 받기로 했습니다.</p>
<p>전체가 React로 구성되는 프로젝트는 아주 많이 만들어봤지만, html로 이미 구현된 페이지에 React Element를 삽입하는 형태로는 작업해본 적이 없었네요. 물론 공식 가이드 첫 부분에 나올 정도로 흔한 상식이긴하지만요… =)</p>
<h2 id="React-ReactDOM-CDN-추가"><a href="#React-ReactDOM-CDN-추가" class="headerlink" title="React, ReactDOM CDN 추가"></a>React, ReactDOM CDN 추가</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;like_button_container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- global 변수로 React를 가져다 사용하기 위해 아래와 같이 CDN을 통해 js를 불러오도록 합니다. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@17/umd/react.production.min.js&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@17/umd/react-dom.production.min.js&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//아래의 예제는 React 공식 docs에서 제공하는 예제입니다.</span></span></span><br><span class="line"><span class="language-javascript"><span class="meta">      &quot;use strict&quot;</span>; <span class="comment">//올바르지 않은 문법을 사전에 검출할 수 있도록 strict 모드를 쓴다는 의미라네요.</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> e = <span class="title class_">React</span>.<span class="property">createElement</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">class</span> <span class="title class_">LikeButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">super</span>(props);</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">liked</span>: <span class="literal">false</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">liked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="string">&quot;You liked this.&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title function_">e</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;button&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">onClick</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">liked</span>: <span class="literal">true</span> &#125;) &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;Like&quot;</span></span></span><br><span class="line"><span class="language-javascript">          );</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> domContainer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#like_button_container&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="title function_">e</span>(<span class="title class_">LikeButton</span>), domContainer);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>이제 root/about/ 경로에 index.md 대신 index.html을 생성하고, 위의 코드를 넣어주면 끝입니다.</p>
<h2 id="babel-CDN-추가"><a href="#babel-CDN-추가" class="headerlink" title="babel CDN 추가"></a>babel CDN 추가</h2><p>이제 React를 CDN으로 바로 가져다 쓸 수 있다는 것이 확인되었으니, 제가 쓰기 편한 코드로 바꾸고 싶어졌습니다.<br>위의 예제에서 저는 크게 두 가지가 불편해보였어요.</p>
<ul>
<li>createElement</li>
<li>Class Component</li>
</ul>
<p>혹시 위의 예제에서 createElement 함수의 사용법을 보셨나요? 아래의 두 코드는 같은 동작을 위한 코드입니다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;doSomething&#125; /&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">onClick</span>: doSomething &#125;);</span><br></pre></td></tr></table></figure>

<p>차이점은, jsx가 훨씬 더 html스럽게 생겨서 개발자 친화적인 것 같네요. 저도 jsx를 사용하는게 더 편하기 때문에 CDN으로부터 불러온 babel 스크립트가 jsx 형식을 알아먹을 수 있도록 수정해볼게요.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;like_button_container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@17/umd/react.production.min.js&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@17/umd/react-dom.production.min.js&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type을 주는 것을 잊지 마세요. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">      &quot;use strict&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; useState &#125; = <span class="title class_">React</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> <span class="title function_">LikeButton</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> [liked, setLiked] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> liked ? (</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;You liked this.&quot;</span></span></span><br><span class="line"><span class="language-javascript">        ) : (</span></span><br><span class="line"><span class="language-javascript">          <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">              setLiked(true);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            &#125;&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          &gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            Like</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">        );</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">LikeButton</span> /&gt;</span></span>, domContainer);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>짠! 이제 제가 쓰기 편한 형태로 어느정도 정리가 된 것 같습니다.</p>
<h2 id="개발"><a href="#개발" class="headerlink" title="개발!"></a>개발!</h2><p>개발환경이 갖추어졌으니 아래의 주요 기능을 중심으로 개발하면 되겠습니다.</p>
<ul>
<li>이력 타임라인</li>
<li>기술스택 뱃지목록</li>
<li>사이드 플젝 진행이력</li>
<li>성격이 드러나는 짧은 소개글</li>
</ul>
<p>(WIP) 생각날 때마다 추가 중입니다 =)</p>
]]></content>
      <categories>
        <category>개발일지</category>
        <category>블로그</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>React</tag>
        <tag>UI/UX</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo] Hexo와 NexT 테마를 이용하여 내 입맛에 맞는 개발 블로그를 만들자</title>
    <url>/2022/01/12/ToyProjects/Blog/hexo/</url>
    <content><![CDATA[<h1 id="MOTIVATION"><a href="#MOTIVATION" class="headerlink" title="MOTIVATION"></a>MOTIVATION</h1><p>개발 블로그를 시작했을 때부터 tistory를 애용해왔는데, 최근 들어서는 좀 더 <strong>놀이터</strong> 같은 느낌의 블로그를 갖고 싶다는 생각이 들었음.<br>그래서 작년(2021년) 상반기 즈음 사이드 프로젝트로 <em>내 웹페이지를 만들어보자</em>는 계획을 세우게 되었고, 미루고 미루다가 드디어 올해(2022년) 첫 사이드 프로젝트로 다시 꺼내게 되었다.</p>
<h1 id="요구사항"><a href="#요구사항" class="headerlink" title="요구사항"></a>요구사항</h1><p>고객(나)과 개발자(이것도 나)의 입장에서 여러가지 옵션을 재보았던 내용은 아래와 같다.</p>
<p><strong>서버 비용은 들이고 싶지 않아요</strong></p>
<ul>
<li>처음에는 집에 굴러다니는 라즈베리파이에 올릴까 생각도 했는데 의외로 나도 모르는 사이에 전원을 꺼버리는 일이 잦고, update 하려면 서버에 붙어야한다는 점이 너무 번거로워서 몇 번 해보고 포기했다.</li>
<li>정적 웹 사이트를 무료로 deploy할 수 있는 github page 를 선택하게 되었다. 나만 안쓰고 있었어…</li>
</ul>
<p><strong>웹사이트 구성을 직접 하는 건 어려울 것 같은데?</strong></p>
<ul>
<li>이것도 처음에는 내 취지 (<strong>놀이터</strong> 같은 블로그)에 맞게 처음부터 다 구성하려고 했었다. 하지만 막상 손을 대고 보니 고려할 부분이 정말정말 많더라… 검색이나 태그, 카테고리 기능을 추가하려고 하니까 구조를 잡는 것이 너무 부담스럽게 느껴졌다.</li>
<li>검색 성능이 보장되는 태그나 카테고리를 구성하기 위해서 알고리즘과 자료구조부터 찾아봤고, 서버 비용을 들이더라도 elastic search 를 한 번 써볼까 spike도 해봤는데 ㅠㅠ 공부할 내용이 꽤 되는 것은 둘째치고 재미가 없었다. 그래서 얼마안가 포기.</li>
</ul>
<p><strong>정적 웹 사이트 생성기의 도움을 받자</strong></p>
<ul>
<li>github page를 사용하기로 정했을 때 Jekyll로 대표되는 정적 웹 사이트 생성기에 대해서 함께 찾아본 적은 있는데, theme가 모두 마음에 들지 않았던 것 같다.</li>
<li>몇 개월 뒤에 검색 기능 구현에 지쳐서 찬찬히 다시 찾아봤는데, <a href="https://hexo.io/ko/index.html">Hexo</a> 라는 정적 웹 사이트 생성기에 <a href="https://theme-next.js.org/">NexT</a> theme이 눈에 들었다.</li>
</ul>
<p>Hexo 및 NexT 모두 가이드가 잘 되어있는 편이라, 이틀 정도로 github deploy 까지 완료 가능했다.</p>
<h1 id="진행내용"><a href="#진행내용" class="headerlink" title="진행내용"></a>진행내용</h1><h2 id="Hexo-프로젝트-생성-및-구동"><a href="#Hexo-프로젝트-생성-및-구동" class="headerlink" title="Hexo 프로젝트 생성 및 구동"></a>Hexo 프로젝트 생성 및 구동</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h2 id="NexT-테마-적용"><a href="#NexT-테마-적용" class="headerlink" title="NexT 테마 적용"></a>NexT 테마 적용</h2><p>프로젝트 root 경로에서</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>

<p>그리고 hexo/_config.yml 에서</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<h2 id="NexT-테마-커스터마이징-기본"><a href="#NexT-테마-커스터마이징-기본" class="headerlink" title="NexT 테마 커스터마이징 (기본)"></a>NexT 테마 커스터마이징 (기본)</h2><p><a href="https://theme-next.js.org/docs/getting-started/">NexT docs</a>를 참고하여 커스터마이징.<br>대부분의 기본 옵션은 _config.next.yml에 명시되어있어서, flag나 값을 바꿔주는 방식으로 쉽게 변경이 가능하다.</p>
<h2 id="NexT-테마-커스터마이징-고오급"><a href="#NexT-테마-커스터마이징-고오급" class="headerlink" title="NexT 테마 커스터마이징 (고오급)"></a>NexT 테마 커스터마이징 (고오급)</h2><p>style이나 html을 추가하고 싶은 경우, _config.next.yml에서 아래의 항목을 주석 해제하고 해당 경로에 파일을 만들어서 추가하고 싶은 style이나 html을 넣어주면 된다.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">head:</span> <span class="string">source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p>예를 들어 나는 google AdSense를 추가하고 싶었는데, html head 태그 안에 script를 넣을 방법이 필요했다.<br>그럴때 위 의 custom_file_path 에서 head 항목을 주석 해제하고 해당 경로에 head.njk 파일을 만들어준 다음 아래와 같이 입력해주면</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;google-site-verification&quot;</span> <span class="attr">content</span>=<span class="string">&quot;some_value&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">async</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=some_value&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>hexo generate</code>명령어 수행 시 위의 html 코드가 head 하단에 삽입된다.</p>
<p>또, style 커스터마이징도 동일한 방법으로 가능하다.<br>custom_file_path 에서 style 항목을 주석 해제하고 해당 경로에 variables.styl 파일을 만들어준 다음 아래와 같이 입력해주면</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.search-popup</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br></pre></td></tr></table></figure>

<p><code>hexo generate</code>명령어 수행 시 원하는대로 style이 잘 변경된 것을 확인할 수 있다.</p>
<p>+) 위의 방법으로 style 커스터마이징을 하면 전반적인 통일성이 깨지므로 theme 사용의 이점이 퇴색될 수 있을 것 같아서 좀 더 찾아봤는데 (.node_modules/hexo-theme-next 에서 직접 열어볼 수 있다. )<br>기본적으로 font family나 size, 대표 color 는 variable로 관리되고 있음을 확인할 수 있었다. 따라서 테마 색상, 폰트 정도만 변경하고자 한다면 variables.styl에 아래와 같이 써주는게 좋겠다.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$theme</span>-<span class="attribute">color</span> = <span class="number">#FFD460</span>;</span><br><span class="line"><span class="variable">$brand</span>-<span class="attribute">color</span> = <span class="number">#2D4059</span>;</span><br><span class="line"><span class="variable">$text</span>-<span class="attribute">color</span> = <span class="number">#2D4059</span>;</span><br><span class="line"><span class="variable">$font</span>-family-chinese = <span class="string">&#x27;IBM Plex Sans KR&#x27;</span>, sans-serif;</span><br><span class="line"><span class="variable">$font</span>-family-base         = <span class="variable">$font</span>-family-chinese;</span><br><span class="line"><span class="variable">$font</span>-family-logo         = <span class="variable">$font</span>-family-chinese;</span><br><span class="line"><span class="variable">$font</span>-family-headings     = <span class="variable">$font</span>-family-chinese;</span><br><span class="line"><span class="variable">$font</span>-family-posts        = <span class="variable">$font</span>-family-chinese;</span><br></pre></td></tr></table></figure>

<h2 id="github-page-배포"><a href="#github-page-배포" class="headerlink" title="github page 배포"></a>github page 배포</h2><p>_config.yml에 deploy target을 명시한다.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/ga0hyeon/ga0hyeon.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>

<p>deployer를 설치하고</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>배포 명령어를 수행하면 끝이다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>+) github credential 설정이 되어있지 않은 경우 에러 메시지가 발생할 수 있다. 흔한 에러이므로 구글링하면 금방 해결 가능하다.</p>
<h2 id="2022-09-02-추가-highlight-js-적용하기"><a href="#2022-09-02-추가-highlight-js-적용하기" class="headerlink" title="(2022.09.02 추가) highlight.js 적용하기"></a>(2022.09.02 추가) highlight.js 적용하기</h2><p>개발 블로그이다 보니 코드 블럭을 매우 자주 사용하는데, 색이 없으니 못생겨보여서 테마를 적용했다.<br><a href="https://theme-next.js.org/highlight/">테마 목록</a>중에 원하는 것을 고른뒤 아래 html의 <code>&#123;스타일명&#125;</code> 자리에 넣어주면 된다. 나는 rainbow를 선택했다 ㅎㅎ</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> &#123; <span class="string">스타일명</span> &#125;</span><br><span class="line">    <span class="attr">dark:</span> &#123; <span class="string">스타일명</span> &#125;</span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span></span><br></pre></td></tr></table></figure>

<h1 id="그리고-더-해야할일"><a href="#그리고-더-해야할일" class="headerlink" title="그리고 더 해야할일"></a>그리고 더 해야할일</h1><ul>
<li><input disabled="" type="checkbox"> github actions로 배포 자동화하기</li>
<li><input disabled="" type="checkbox"> 사이드바에 category tree가 보이게 하고싶다!</li>
</ul>
]]></content>
      <categories>
        <category>개발일지</category>
        <category>블로그</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>[토이프로젝트] 개더타운 클론코딩 - 1</title>
    <url>/2022/07/20/ToyProjects/Gather/gather-clonecoding-1/</url>
    <content><![CDATA[<h1 id="MOTIVATION"><a href="#MOTIVATION" class="headerlink" title="MOTIVATION"></a>MOTIVATION</h1><p>나는 코딩이던 미싱이던 그림이던 단시간에 머리를 풀가동해서 결과물을 끌어내는것을 좋아한다.<br>사실 이런 챌린지를 기획할 때 제일 어려운 점은 목표를 정하는 것이다. 끝내는 데에 시간이 N시간 정도면 되겠다 싶으면서도 그 시간 동안 끊임없이 흥미와 도전정신을 끌어올릴 수 있는 목표를 정해야하기 때문이다. 말 그대로 시작이 반인 셈 ㅎㅎ</p>
<p>멘탈 상태가 좋을 때는 이런 아이디어가 샘솟는데 최근에는 이래저래 의욕이 하나도 없어서 침체되어있다가… 간만에 주말에 시간이 생겨서 일을 벌려 보았다.</p>
<p>요즘 업무하면서 정말 유용하게 사용하고 있는 개더타운을 참고하여 화상채팅 웹사이트를 구현해보려고 한다. 이런 주제를 선정하게 된 이유는 다음과 같다.</p>
<ul>
<li>정제된 전체 가이드나 소스가 흔히 돌아다니지 않는 듯 하다. 개발하면서 제일 꿀맛은 개척하는 맛이니까</li>
<li>평소에 궁금했던 웹 기술 분야를 세 개나 체험할 수 있다.<ul>
<li>WebSocket 통신 (을 사용하는 줄 알았지만 뒤에 가서 WebRTC 라는 것을 깨닫게 될 예정) 체험하기</li>
<li>HTML5 게임 개발 라이브러리 또는 프레임워크 서칭 및 체험하기</li>
<li>인기 있는 디자인 시스템 서칭 및 체험하기</li>
</ul>
</li>
</ul>
<h1 id="PREPARATION"><a href="#PREPARATION" class="headerlink" title="PREPARATION"></a>PREPARATION</h1><h2 id="개더타운은-무엇으로-만들어져있나"><a href="#개더타운은-무엇으로-만들어져있나" class="headerlink" title="개더타운은 무엇으로 만들어져있나?"></a>개더타운은 무엇으로 만들어져있나?</h2><p>REST api를 주로 설계/개발해왔기 때문에 실시간 통신에 대해 아는 것이 없어서, 막연하게 ‘개더타운은 WebSocket으로 뭔가 되어있지 않을까?’ 라고 생각했다.<br>물론 그러면서도 어떻게 그 많은 사람이 음성 / 비디오를 서로 전송하고 있을까… 서버가 중간에서 이 많은 미디어를 다 나누어주고 있다면 개더타운은 어떻게 공짜인걸까… 생각은 했으나 그 뒤까지는 몰랐다.<br>찾아보니 개더타운은 P2P로 미디어 또는 임의의 데이터를 주고받을 수 있는 WebRTC를 사용하고 있고, WebRTC은 이미 오래전부터 많은 곳에서 (게임, 화상회의, 휘발성 채팅) 쓰이고 있다고 한다. 떠올려보니 회의 참여자 중 로컬 자원을 많이 쓰고 있는 사람이 포함되어 있을 때 내 게더타운이 약간 느려지는 현상이 종종 있었는데 P2P라서 그랬던 걸 수 있다는 생각이 든다.</p>
<p>메인 기술 셋을 알아냈으니 WebRTC에 대해 구글링해봤다. 생각보다 공식 가이드 및 샘플이 탄탄해서 처음 접하는 기술임에도 왠지 순탄히 진행될 것 같다. 찾은 리소스는 아래와 같이 리스트업 해둔다.</p>
<ul>
<li><a href="https://webrtc.org/getting-started/firebase-rtc-codelab">잘 정리된 공식 가이드</a></li>
<li><a href="https://webrtc.github.io/samples">잘 정리된 공식 샘플코드</a></li>
<li><a href="https://developer.mozilla.org/ko/docs/Web/API/WebRTC_API/Signaling_and_video_calling">Mozilla의 WebRTC 설명</a></li>
</ul>
<h2 id="어떻게-만들까"><a href="#어떻게-만들까" class="headerlink" title="어떻게 만들까?"></a>어떻게 만들까?</h2><p>개더타운에 접속해서 F12도 켜보고, 구글링으로 찾은 가이드도 읽어어 보니 어느정도 아키텍처는 그려진 것 같다.<br><image src="/images/webrtc_layout.png" /><br>각 항목에 대한 설명은 다음과 같다.</p>
<ul>
<li>Signaling Server 구성 : <strong>Django with djangoRestFramework</strong><br>WebRTC 자체는 P2P 방식이라 미디어 교환 자체를 위해서는 중간다리 역할을 하는 서버가 필요없지만, 맨 처음 통신을 시작할 때 Client 간의 메시지 포맷 등을 협의 (Signaling) 하기 위한 서버가 필요하다고 한다. 요건 오랜만에 Django로 만들어보기로 한다.</li>
<li>화면구성<ul>
<li>뼈대 : <strong>React.js with Chakra UI</strong><br>화면 디자인 및 스타일링 작업도 재미있고 신나는 일이지만 요즘 표준 없는 UX/UI (정확히는 FE 개발자 - UX/UI 협업 표준의 부재(?) 또는 어려움(?)..)에 현타를 느끼고 있어서, 유명한 디자인 시스템을 써보기로 했다. 검색하면 여러 개의 빵빵한 디자인 시스템이 나오는데, 그 중 나는 <a href="https://www.npmjs.com/package/@chakra-ui/react">Chakra UI</a>를 써보기로 했다.</li>
<li>맵 및 캐릭터 렌더 : <strong>Phaser</strong><br>HTML5 게임 개발 라이브러리 / 프레임워크에 대해서도 서칭을 했고, 최종으로는 Phaser와 PixiJS 두 개가 후보에 올랐다. 처음 관심 가져본 분야여서 판단을 내리기 어려웠는데 <a href="https://stackoverflow.com/questions/38509629/decide-pixi-js-or-phaser">요 글</a>이 큰 도움이 됐다. 내가 이해한 바를 키워드로 요약하자면 편리함(Phaser) vs 자유도(PixiJS) 같다. PixiJS를 쓰면 좀 더 deep하게 이해할 수 있을 것 같아서 10초 정도 고민됐는데, 욕심 같아서 포기했다. 이번에는 Phaser를 사용해보고, 다음에 HTML5 게임 개발이 정말 하고 싶어지면 그때 PixiJS를 써보자.<br>+) 뜬금없지만 <a href="https://phaser.io/">Phaser 웹사이트</a>가 너무나 2000년대 감성이다.</li>
</ul>
</li>
<li>미디어 전송 : <strong>WebRTC</strong></li>
</ul>
<h2 id="무엇부터-어떤-순서로-만들까"><a href="#무엇부터-어떤-순서로-만들까" class="headerlink" title="무엇부터 어떤 순서로 만들까?"></a>무엇부터 어떤 순서로 만들까?</h2><p>이번 사이드 프로젝트에서 제일 큰 수확이 요 스텝이라고 생각한다. 일정에 쫒기며 떠밀리듯이 개발하는 것이 요즘 내 개발 기피(?)의 원인이라고 생각하기 때문에 토이 프로젝트 만큼은 그렇게 진행하지 않으려고 노력했다. 사실 과거를 돌아보면 나는 토이 프로젝트도 그렇게 일정에 쫒기며 했던 사람이었긴하다 ㅋㅋㅋ 물론 오버웤이 내 의지였냐는 또 다른 문제긴 하지만…</p>
<hr>
<p>아모튼!! 이제는 그렇게 일하지 않으리라.. 다짐하면서 개발에 착수하기 전 내가 한 고민들을 적어보면 다음과 같다.</p>
<p><strong>고민1️⃣</strong> 다음 중 내가 우선 시 하는 것은 무엇인가?</p>
<ul>
<li>내가 할애하려고 계획한 에포트 이상은 들이지 않고 진행하기</li>
<li>내가 마무리하려고 계획한 날짜까지는 끝내기</li>
<li>내가 계획했던 수준까지는 결과물의 퀄리티 내기<ul>
<li>외적인 퀄리티 (기능성, 사용성, 심미성 등등)</li>
<li>내적인 퀄리티 (코드 품질)</li>
</ul>
</li>
</ul>
<p><strong>고민2️⃣</strong> 목표 기간 내에 효율적이고 빠르게 작업을 하려면 어떻게 일을 쪼개고, 어떤 순서로 일을 해야할까?</p>
<p><strong>고민3️⃣</strong> 작업 내용이 대부분 내가 처음 해보는 것이라면, 내가 아는 일을 할 때와 어떻게 다르게 일해야할까?</p>
<hr>
<p>그리고 위 고민에 대한 결론은 요렇게 냈다. 물론 앞으로 계속해서 개정해나갈 예정이다 ㅎㅎ 실험🧪적인 것도 있고 ㅋㅋㅋ</p>
<p><strong>고민1️⃣</strong> 다음 중 내가 우선 시 하는 것은 무엇인가?<br><strong>결론💡</strong> 이 토이 프로젝트에서 나는 <code>내적인 퀄리티 &gt; 마감일 지키기 &gt; 에포트 지키기 &gt; 외적인 퀄리티</code> 순서대로 중요하게 생각할 것이다.</p>
<ol>
<li>내적인 퀄리티 기준 : <code>Github public repo에 공개할 수 있는 수준</code> 으로</li>
<li>마감일 지키기 기준 : 8/28</li>
<li>에포트 지키기 기준 : <code>평일은 MAX 하루 3시간 이내, 주말은 하루 골라서 MAX 반나절만</code> 투자</li>
<li>외적인 퀄리티 기준 : 뭐 그냥 데모 가능한 정도로만?<br>나는 요게 제일 신선했다. 실제로 내가 토이 플젝을 하면서 들였던 시간의 꽤 많은 부분이 외적인 퀄리티에 있었는데,<br>정작 진지하게 내가 이것을 얼마나 중요하게 생각하는가를 생각해보았더니 사실은 내가 외적인 퀄리티의 중요도를 별로 높게 생각하고 있지 않았다. 작은 부분이 눈에 거슬리면 ‘에이 뭐 별로 안걸리는데 지금 금방 고칠까’ 하는 마음에 바로 바로 코드에 손을 대는 것이 누적되어 결과적으로 시간을 많이 쏟은 셈이 되었던 것 같다. 한 눈을 팔았다고 해야하나… 아무튼 시간을 내어 이런 고민을 했던 것이 이번 토이 프로젝트 최고의 수확인 것 같다. 👍</li>
</ol>
<p><strong>고민2️⃣</strong> 목표 기간 내에 효율적이고 빠르게 작업을 하려면 어떻게 일을 쪼개고, 어떤 순서로 일을 해야할까?<br><strong>결론💡</strong> 이 토이 프로젝트에서 나는 성취감을 느낄수 있는 최소한의 단위로 일을 쪼개고, 요렇게 쪼갠 일들을 다시 연관된 것들 끼리 뭉쳐서 진행할 것이다. 각 항목에서 성취할 수 있는 내용은 🎁 표시로 적어봤다.</p>
<ol>
<li>git repository 생성 및 각 모듈 셋업하기<br>🎁 React, Django 셋업과정</li>
<li>화면 뼈대 구성하기<br>🎁 Chakra 사용법</li>
<li>맵 구성하기<br>🎁 Phaser 사용법<br>🎁 Phaser와 React.js를 함께 사용하는 과정</li>
<li>캐릭터 이동 구현하기</li>
<li>회의실 입장 구현하기</li>
<li>2인 음성 영상 챗 구현하기<br>🎁 WebRTC 예제 이해 및 응용</li>
<li>다자 음성 영상 챗 구현하기</li>
<li>미디어 설정 기능 구현하기</li>
</ol>
<p><strong>고민3️⃣</strong> 작업 내용이 대부분 내가 처음 해보는 것이라면, 내가 아는 일을 할 때와 어떻게 다르게 일해야할까?<br><strong>결론🧪</strong> 이 토이 프로젝트에서 나는 현재 작업 마무리 직후 다음 작업 내용에 대한 서칭을 하고, 실제 다음 작업 까지 약간의 텀을 두고 스스로에게 고민할 시간을 의도적으로 줄 것이다.</p>
<ul>
<li>생각보다 멍때릴때 나오는 코드가 각잡고 짠 코드보다 선방하는 것 같아서 ㅋㅋㅋ 이번에 실험해본다.</li>
</ul>
<p>DELEVERY 단계부터는 내용이 길어져서 다음 포스트에서 이어서 정리한다 :)</p>
]]></content>
      <categories>
        <category>개발일지</category>
        <category>개더타운 클론코딩</category>
      </categories>
      <tags>
        <tag>토이프로젝트</tag>
        <tag>WebRTC</tag>
        <tag>Phaser</tag>
      </tags>
  </entry>
  <entry>
    <title>[토이프로젝트] 개더타운 클론코딩 - 2</title>
    <url>/2022/07/28/ToyProjects/Gather/gather-clonecoding-2/</url>
    <content><![CDATA[<p>이전 포스트에서는 MOTIVATION, PREPARATION 까지 정리했고, 이어서 DELEVERY했던 내용 중 3.맵 구성하기 항목까지 기록한다.</p>
<ol>
<li><strong>git repository 생성 및 각 모듈 셋업하기</strong><br>🎁 React, Django 셋업과정</li>
<li><strong>화면 뼈대 구성하기</strong><br>🎁 Chakra 사용법</li>
<li><strong>맵 구성하기</strong><br>🎁 Phaser 사용법<br>🎁 Phaser와 React.js를 함께 사용하는 과정</li>
<li>캐릭터 이동 구현하기</li>
<li>회의실 입장 구현하기</li>
<li>2인 음성 영상 챗 구현하기</li>
<li>다자 음성 영상 챗 구현하기</li>
<li>미디어 설정 기능 구현하기</li>
</ol>
<h1 id="DELEVERY"><a href="#DELEVERY" class="headerlink" title="DELEVERY"></a>DELEVERY</h1><h2 id="1-git-repository-생성-및-각-모듈-셋업하기"><a href="#1-git-repository-생성-및-각-모듈-셋업하기" class="headerlink" title="1. git repository 생성 및 각 모듈 셋업하기"></a>1. git repository 생성 및 각 모듈 셋업하기</h2><p><a href="https://github.com/ga0hyeon/cowork-saga">git repository</a>를 만들어주고, signalingServer와 client 폴더에 각각 Django와 React 셋업을 진행했다.</p>
<h3 id="Django-셋업-with-djangoRestFramework"><a href="#Django-셋업-with-djangoRestFramework" class="headerlink" title="Django 셋업 with djangoRestFramework"></a>Django 셋업 with djangoRestFramework</h3><p><a href="https://docs.djangoproject.com/ko/4.0/intro/">django docs</a>를 참고하여 초기 세팅을 진행한다.<br>+) mac에 python 2.7이 기본으로 깔려있어서 3.x 버전의 python을 받아주었다. python3을 기본으로 바라보도록 bashrc에도 alias를 추가해준다.</p>
<p>django를 설치해주고</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python -m pip install Django</span><br></pre></td></tr></table></figure>

<p>설치 후 잘 설치되었는지 버전을 확인한다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python -m django --version</span><br></pre></td></tr></table></figure>

<p>그리고 아래 명령어로 현재 경로에 django 프로젝트를 생성한다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python -m django startproject gather_clone_siganlling_server</span><br></pre></td></tr></table></figure>

<p>지정해준 폴더 (나의 경우 gather_clone_siganlling_server)로 이동하여 아래의 명령어를 수행하면, 짜잔! 기본포트(8000)에 샘플페이지가 뜬다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure>

<p>나는 웹서버가 아니라 REST Api 서버로 사용할 것이므로, <a href="https://www.django-rest-framework.org/#installation">django-rest-framework docs</a>를 참고하여 djangoRestFramework를 깔아주자.<br>example까지 따라서 만들면, 이제 localhost:8000에 이전의 django 샘플페이지가 아니라 swagger와 유사한 형태의 REST framework 페이지가 뜬다.</p>
<h3 id="React-셋업-with-Chakra-UI-amp-Adapter-js"><a href="#React-셋업-with-Chakra-UI-amp-Adapter-js" class="headerlink" title="React 셋업 with Chakra UI &amp; Adapter.js"></a>React 셋업 with Chakra UI &amp; Adapter.js</h3><ol>
<li>CRA로 React 앱 초기 세팅</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx create-react-app gather-clone-client --template @chakra-ui/typescript</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Adapter.js 라이브러리 설치<br>Adapter.js는 Polyfill(브라우저에서 지원하지 않는 최신 기능을 사용할 수 있도록 도와주는 코드의 모음)과 Shim(이미 존재하는 코드의 동작을 바로잡는데에 사용하는 코드의 모음)을 사용하여 WebRTC의 브라우저 간 호환성 문제를 해결해둔 라이브러리이다.<br>WebRTC가 계속해서 변화하고 있는 기술이고, 각 브라우저별로 지원 수준이 다르기 때문에 일괄 적용이 쉽지 않은 모양이다.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webrtc-adapter</span><br></pre></td></tr></table></figure>

<h2 id="2-화면-뼈대-구성하기"><a href="#2-화면-뼈대-구성하기" class="headerlink" title="2. 화면 뼈대 구성하기"></a>2. 화면 뼈대 구성하기</h2><p>위에서 만들어준 React 프로젝트 폴더에서 화면 뼈대 구성을 이어서 진행한다. 화면 구조는 아래와 매우 간단하다 :)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">App.tsx</span><br><span class="line">pages</span><br><span class="line"> ⌞IntroPage.tsx</span><br><span class="line"> ⌞MeetingPage.tsx</span><br></pre></td></tr></table></figure>

<p>IntroPage에는 Chakra UI를 활용해서 간단한 정보 입력 form을 구현한다. 우선은 구분을 위해 이름 정도만 입력받도록 하자.</p>
<h2 id="3-맵-구성하기"><a href="#3-맵-구성하기" class="headerlink" title="3. 맵 구성하기"></a>3. 맵 구성하기</h2><p>맵 구성에는 Phaser를 사용한다.</p>
<h3 id="Phaser란"><a href="#Phaser란" class="headerlink" title="Phaser란?"></a>Phaser란?</h3><p>cross-browser HTML5 게임을 쉽고 빠르게 만들 수 있도록하는 프레임워크.</p>
<h3 id="Phaser를-사용하기-위한-추가적인-개발환경-setup"><a href="#Phaser를-사용하기-위한-추가적인-개발환경-setup" class="headerlink" title="Phaser를 사용하기 위한 추가적인 개발환경 setup"></a>Phaser를 사용하기 위한 추가적인 개발환경 setup</h3><p>Phaser가 html 기반으로 게임을 만들수 있게 해준다고 하더라도, 브라우저에서는 원칙적으로 로컬 리소스에 접근할 수 없기 때문에 html 파일 만으로는 Phaser 게임을 실행할 수 없다. (사실 이 개념 예전에도 접했었는데 그때는 바로 이해가 안되었는데.. 지금은 후루룩 읽힌다. 아주 좋다!!)따라서 html과 리소스를 올릴 서버가 필요하고, 공식 가이드에서는 python, php, node.js 정도를 언급하고 있다.</p>
<p>나는 위에서 이미 React로 페이지 뼈대를 구성했고, 운영 단계까지 올릴 생각이 없으므로 React 개발 서버면 충분하다.</p>
<p>그리고 가이드에 IDE도 몇 가지 언급하고있는데, brakets 같은 HTML 편집기로도 개발이 가능하다고 한다. 재밌다. 물론 나는 위에서 세팅해둔 VS code를 사용한다 ㅎㅎ</p>
<p>추가적인 서버 셋업과 IDE 설정이 필요 없으니 Phaser 사용을 위해서는 요 정도만 추가로 해주면 되겠다.</p>
<ul>
<li>npm으로 Phaser 설치</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install phaser</span><br></pre></td></tr></table></figure>

<h3 id="가이드를-따라-샘플-게임-만들기"><a href="#가이드를-따라-샘플-게임-만들기" class="headerlink" title="가이드를 따라 샘플 게임 만들기"></a>가이드를 따라 샘플 게임 만들기</h3><p>본격적으로 구미에 맡는 맵을 만들기 전에 Phaser에 익숙해질 겸 가이드를 따라 샘플 게임을 만들어본다. 가이드로 제공된 소스는 html script라서, 글로벌 변수가 따로 없는 react에 맞게 ref, state를 사용해서 약간 수정해봤다. 잘 뜬다 :)<br>(making-your-first-phaser-3-game)[<a href="https://phaser.io/tutorials/making-your-first-phaser-3-game]">https://phaser.io/tutorials/making-your-first-phaser-3-game]</a></p>
<p>이 샘플 소스만으로도 회의실 구성에 필요한 요소는 어느정도 구현이 가능해보인다. 굿!</p>
<p><img src="/images/gather_clone_coding/1.png" alt="Sample Game"></p>
<details>
<summary>샘플 소스 전문</summary>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Phaser</span> <span class="keyword">from</span> <span class="string">&quot;phaser&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SamplePage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> variables = useRef&lt;&#123;</span><br><span class="line">    <span class="attr">platforms</span>: <span class="title class_">Phaser</span>.<span class="property">Physics</span>.<span class="property">Arcade</span>.<span class="property">StaticGroup</span>;</span><br><span class="line">    <span class="attr">player</span>: <span class="title class_">Phaser</span>.<span class="property">Types</span>.<span class="property">Physics</span>.<span class="property">Arcade</span>.<span class="property">SpriteWithDynamicBody</span>;</span><br><span class="line">    <span class="attr">cursors</span>: <span class="title class_">Phaser</span>.<span class="property">Types</span>.<span class="property">Input</span>.<span class="property">Keyboard</span>.<span class="property">CursorKeys</span>;</span><br><span class="line">    <span class="attr">stars</span>: <span class="title class_">Phaser</span>.<span class="property">Physics</span>.<span class="property">Arcade</span>.<span class="property">Group</span>;</span><br><span class="line">  &#125;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> config = useRef&lt;<span class="title class_">Phaser</span>.<span class="property">Types</span>.<span class="property">Core</span>.<span class="property">GameConfig</span>&gt;(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Phaser</span>.<span class="property">AUTO</span>,</span><br><span class="line">    <span class="attr">parent</span>: <span class="string">&quot;sample-page&quot;</span>, <span class="comment">//NOTE : 아래 div의 id값을 넣어주면 된다.</span></span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">physics</span>: &#123;</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&quot;arcade&quot;</span>,</span><br><span class="line">      <span class="attr">arcade</span>: &#123;</span><br><span class="line">        <span class="attr">gravity</span>: &#123; <span class="attr">y</span>: <span class="number">200</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">scene</span>: &#123;</span><br><span class="line">      <span class="attr">preload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&quot;sky&quot;</span>, <span class="string">&quot;assets/sky.png&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&quot;ground&quot;</span>, <span class="string">&quot;assets/platform.png&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&quot;star&quot;</span>, <span class="string">&quot;assets/star.png&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&quot;bomb&quot;</span>, <span class="string">&quot;assets/bomb.png&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">spritesheet</span>(<span class="string">&quot;dude&quot;</span>, <span class="string">&quot;assets/dude.png&quot;</span>, &#123;</span><br><span class="line">          <span class="attr">frameWidth</span>: <span class="number">32</span>,</span><br><span class="line">          <span class="attr">frameHeight</span>: <span class="number">48</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">create</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">image</span>(<span class="number">400</span>, <span class="number">300</span>, <span class="string">&quot;sky&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//NOTE : config에 physics를 정의해두어야 정상적으로 동작한다</span></span><br><span class="line">        <span class="keyword">const</span> platforms = <span class="variable language_">this</span>.<span class="property">physics</span>.<span class="property">add</span>.<span class="title function_">staticGroup</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//NOTE : static physics body의 크기를 변경했으므로 refreshBody 호출</span></span><br><span class="line">        platforms.<span class="title function_">create</span>(<span class="number">400</span>, <span class="number">568</span>, <span class="string">&quot;ground&quot;</span>).<span class="title function_">setScale</span>(<span class="number">2</span>).<span class="title function_">refreshBody</span>();</span><br><span class="line"></span><br><span class="line">        platforms.<span class="title function_">create</span>(<span class="number">600</span>, <span class="number">400</span>, <span class="string">&quot;ground&quot;</span>);</span><br><span class="line">        platforms.<span class="title function_">create</span>(<span class="number">50</span>, <span class="number">250</span>, <span class="string">&quot;ground&quot;</span>);</span><br><span class="line">        platforms.<span class="title function_">create</span>(<span class="number">750</span>, <span class="number">220</span>, <span class="string">&quot;ground&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> player = <span class="variable language_">this</span>.<span class="property">physics</span>.<span class="property">add</span>.<span class="title function_">sprite</span>(<span class="number">100</span>, <span class="number">450</span>, <span class="string">&quot;dude&quot;</span>);</span><br><span class="line">        player.<span class="title function_">setBounce</span>(<span class="number">0.2</span>);</span><br><span class="line">        player.<span class="title function_">setCollideWorldBounds</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">anims</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">          <span class="attr">frames</span>: <span class="variable language_">this</span>.<span class="property">anims</span>.<span class="title function_">generateFrameNumbers</span>(<span class="string">&quot;dude&quot;</span>, &#123; <span class="attr">start</span>: <span class="number">0</span>, <span class="attr">end</span>: <span class="number">3</span> &#125;),</span><br><span class="line">          <span class="attr">frameRate</span>: <span class="number">10</span>,</span><br><span class="line">          <span class="attr">repeat</span>: -<span class="number">1</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">anims</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;turn&quot;</span>,</span><br><span class="line">          <span class="attr">frames</span>: [&#123; <span class="attr">key</span>: <span class="string">&quot;dude&quot;</span>, <span class="attr">frame</span>: <span class="number">4</span> &#125;],</span><br><span class="line">          <span class="attr">frameRate</span>: <span class="number">20</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">anims</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">          <span class="attr">frames</span>: <span class="variable language_">this</span>.<span class="property">anims</span>.<span class="title function_">generateFrameNumbers</span>(<span class="string">&quot;dude&quot;</span>, &#123; <span class="attr">start</span>: <span class="number">5</span>, <span class="attr">end</span>: <span class="number">8</span> &#125;),</span><br><span class="line">          <span class="attr">frameRate</span>: <span class="number">10</span>,</span><br><span class="line">          <span class="attr">repeat</span>: -<span class="number">1</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">physics</span>.<span class="property">add</span>.<span class="title function_">collider</span>(player, platforms);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> cursors = <span class="variable language_">this</span>.<span class="property">input</span>.<span class="property">keyboard</span>.<span class="title function_">createCursorKeys</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> scoreText = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">text</span>(<span class="number">16</span>, <span class="number">16</span>, <span class="string">&quot;score: 0&quot;</span>, &#123;</span><br><span class="line">          <span class="attr">fontSize</span>: <span class="string">&quot;32px&quot;</span>,</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> stars = <span class="variable language_">this</span>.<span class="property">physics</span>.<span class="property">add</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="string">&quot;star&quot;</span>,</span><br><span class="line">          <span class="attr">repeat</span>: <span class="number">11</span>,</span><br><span class="line">          <span class="attr">setXY</span>: &#123; <span class="attr">x</span>: <span class="number">12</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">stepX</span>: <span class="number">70</span> &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        stars.<span class="property">children</span>.<span class="title function_">iterate</span>(<span class="keyword">function</span> (<span class="params">child</span>) &#123;</span><br><span class="line">          (child <span class="keyword">as</span> any).<span class="title function_">setBounceY</span>(<span class="title class_">Phaser</span>.<span class="property">Math</span>.<span class="title class_">FloatBetween</span>(<span class="number">0.4</span>, <span class="number">0.8</span>));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">physics</span>.<span class="property">add</span>.<span class="title function_">collider</span>(stars, platforms);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">physics</span>.<span class="property">add</span>.<span class="title function_">overlap</span>(</span><br><span class="line">          player,</span><br><span class="line">          stars,</span><br><span class="line">          <span class="function">(<span class="params">player, star</span>) =&gt;</span> &#123;</span><br><span class="line">            (star <span class="keyword">as</span> any).<span class="title function_">disableBody</span>(<span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="title function_">setScore</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> &#123;</span><br><span class="line">              scoreText.<span class="title function_">setText</span>(<span class="string">&quot;Score: &quot;</span> + (prev + <span class="number">1</span>));</span><br><span class="line">              <span class="keyword">return</span> prev + <span class="number">1</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (stars.<span class="title function_">countActive</span>(<span class="literal">true</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">              stars.<span class="property">children</span>.<span class="title function_">iterate</span>(<span class="keyword">function</span> (<span class="params">child</span>) &#123;</span><br><span class="line">                (child <span class="keyword">as</span> any).<span class="title function_">enableBody</span>(</span><br><span class="line">                  <span class="literal">true</span>,</span><br><span class="line">                  (child <span class="keyword">as</span> any).<span class="property">x</span>,</span><br><span class="line">                  <span class="number">0</span>,</span><br><span class="line">                  <span class="literal">true</span>,</span><br><span class="line">                  <span class="literal">true</span></span><br><span class="line">                );</span><br><span class="line">              &#125;);</span><br><span class="line"></span><br><span class="line">              <span class="keyword">const</span> x =</span><br><span class="line">                (player <span class="keyword">as</span> any).<span class="property">x</span> &lt; <span class="number">400</span></span><br><span class="line">                  ? <span class="title class_">Phaser</span>.<span class="property">Math</span>.<span class="title class_">Between</span>(<span class="number">400</span>, <span class="number">800</span>)</span><br><span class="line">                  : <span class="title class_">Phaser</span>.<span class="property">Math</span>.<span class="title class_">Between</span>(<span class="number">0</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">              <span class="keyword">const</span> bomb = bombs.<span class="title function_">create</span>(x, <span class="number">16</span>, <span class="string">&quot;bomb&quot;</span>);</span><br><span class="line">              bomb.<span class="title function_">setBounce</span>(<span class="number">1</span>);</span><br><span class="line">              bomb.<span class="title function_">setCollideWorldBounds</span>(<span class="literal">true</span>);</span><br><span class="line">              bomb.<span class="title function_">setVelocity</span>(<span class="title class_">Phaser</span>.<span class="property">Math</span>.<span class="title class_">Between</span>(-<span class="number">200</span>, <span class="number">200</span>), <span class="number">20</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="literal">undefined</span>,</span><br><span class="line">          <span class="variable language_">this</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> bombs = <span class="variable language_">this</span>.<span class="property">physics</span>.<span class="property">add</span>.<span class="title function_">group</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">physics</span>.<span class="property">add</span>.<span class="title function_">collider</span>(bombs, platforms);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">physics</span>.<span class="property">add</span>.<span class="title function_">collider</span>(</span><br><span class="line">          player,</span><br><span class="line">          bombs,</span><br><span class="line">          <span class="function">(<span class="params">player, bomb</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">physics</span>.<span class="title function_">pause</span>();</span><br><span class="line"></span><br><span class="line">            (player <span class="keyword">as</span> any).<span class="title function_">setTint</span>(<span class="number">0xff0000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">anims</span>.<span class="title function_">play</span>(<span class="string">&quot;turn&quot;</span>, player);</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">text</span>(<span class="number">240</span>, <span class="number">300</span>, <span class="string">&quot;GAME OVER&quot;</span>, &#123;</span><br><span class="line">              <span class="attr">fontSize</span>: <span class="string">&quot;64px&quot;</span>,</span><br><span class="line">              <span class="attr">color</span>: <span class="string">&quot;#0xff00&quot;</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="literal">undefined</span>,</span><br><span class="line">          <span class="variable language_">this</span></span><br><span class="line">        );</span><br><span class="line">        variables.<span class="property">current</span> = &#123;</span><br><span class="line">          platforms,</span><br><span class="line">          player,</span><br><span class="line">          cursors,</span><br><span class="line">          stars,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (variables.<span class="property">current</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; cursors, player &#125; = variables.<span class="property">current</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (cursors.<span class="property">left</span>.<span class="property">isDown</span>) &#123;</span><br><span class="line">            player.<span class="title function_">setVelocityX</span>(-<span class="number">160</span>);</span><br><span class="line">            player.<span class="property">anims</span>.<span class="title function_">play</span>(<span class="string">&quot;left&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cursors.<span class="property">right</span>.<span class="property">isDown</span>) &#123;</span><br><span class="line">            player.<span class="title function_">setVelocityX</span>(<span class="number">160</span>);</span><br><span class="line">            player.<span class="property">anims</span>.<span class="title function_">play</span>(<span class="string">&quot;right&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            player.<span class="title function_">setVelocityX</span>(<span class="number">0</span>);</span><br><span class="line">            player.<span class="property">anims</span>.<span class="title function_">play</span>(<span class="string">&quot;turn&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (cursors.<span class="property">up</span>.<span class="property">isDown</span> &amp;&amp; player.<span class="property">body</span>.<span class="property">touching</span>.<span class="property">down</span>) &#123;</span><br><span class="line">            player.<span class="title function_">setVelocityY</span>(-<span class="number">330</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [score, setScore] = useState&lt;number&gt;(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [game, setGame] = useState&lt;<span class="title class_">Phaser</span>.<span class="property">Game</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> game = <span class="keyword">new</span> <span class="title class_">Phaser</span>.<span class="title class_">Game</span>(config.<span class="property">current</span>);</span><br><span class="line">    <span class="title function_">setGame</span>(game);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      game.<span class="title function_">destroy</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;sample-page&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">SamplePage</span>;</span><br></pre></td></tr></table></figure>

</details>

<h3 id="회의실을-그리는데에-사용할-무료-애셋을-찾자"><a href="#회의실을-그리는데에-사용할-무료-애셋을-찾자" class="headerlink" title="회의실을 그리는데에 사용할 무료 애셋을 찾자"></a>회의실을 그리는데에 사용할 무료 애셋을 찾자</h3><p>가장 기본적인 회의실 맵을 그리기 위해서 아래와 같이 크게 세 가지의 애셋이 필요하다.</p>
<ul>
<li>바닥</li>
<li>캐릭터</li>
<li>오브젝트 (벽, 책상, 집기 등등)</li>
<li>맵 뒷배경 이미지</li>
</ul>
<p><a href="https://itch.io/game-assets/free">무료로 애셋을 받을 수 있는 사이트</a>와 <a href="https://pixabay.com/ko">Pixabay</a>에서 발품을 팔아 줍줍한 애셋들은 root의 public 폴더에 차곡차곡 담아준다.</p>
<h3 id="자-이제-회의실을-그려보자"><a href="#자-이제-회의실을-그려보자" class="headerlink" title="자 이제 회의실을 그려보자"></a>자 이제 회의실을 그려보자</h3><p>이제 어느 위치에 어떤 타일을 배치할지 정의하면 된다. Phaser 예제를 둘러보니 아래 캡쳐와 같이 json 형식으로 좌표값을 넘겨받고 있다는 것을 어렵지 않게 확인할 수 있었는데, 처음에는 이걸 손으로 하나하나 해야하는 줄 알고 포기할까 했다.<br><img src="/images/gather_clone_coding/5.png" alt="json"></p>
<p>당연히 요 json을 쉽게 만들 수 있도록 도와주는 프로그램이 이미 있더라. 한 가지만은 아닌 것 같은데, 그 중 나는 <a href="https://www.mapeditor.org/">Tiled</a> 를 사용해보았다. 검색결과가 제일 많아서 ㅎㅎ</p>
<p>Tiled를 실행한 뒤 프로젝트와 맵을 신규 생성하고, 위에서 모아둔 애셋 타일셋을 import 해주면 아래와 같이 맵을 한칸 한칸 그려줄 수 있다.</p>
<p><img src="/images/gather_clone_coding/2.png" alt="회의실 전경"></p>
<p>타일셋을 그릴 때는 용도에 맞게 레이어를 추가할 수 있는 듯 하다. 나는 바닥, 벽, 집기류 총 세 개의 레이어를 사용하여 회의실을 꾸몄다.<br>참고로 맵 메이커를 제대로/잘 사용하는 방법에 대해서는 다른 포스트에서 추가로 다루어야 할 정도로 양이 되는 듯 하다, 이번에는 이 정도로 만족하고 넘어간다.</p>
<p>이제 만든 맵을 Phaser에서 읽을 수 있도록 json 형식으로 저장해주면 되는데, 그전에 맵이 타일셋을 내장하도록 해야하는데… 무슨 이유에서인지 가이드대로 ‘타일셋 내장’ 버튼을 클릭하면 맵이 깨진다 ㅠㅠ<br><img src="/images/gather_clone_coding/3.png" alt="요것을 누르면"><br><img src="/images/gather_clone_coding/4.png" alt="이렇게 된다 ㅠㅠ 왜!!!"><br>잠시 생각해보니 json에 이미지 정보를 내장하는 것이 자연스러운 방법만은 아니라는 생각이 들기도한다. 문득 위에 캡쳐한 Phaser 예제에서 힌트를 얻을 수 있지 않을까 싶어 <a href="https://phaser.io/examples/v3/view/camera/follow-zoom-tilemap">예제 소스</a>를 확인 해보니 아래 코드와 같이 타일셋의 경로도 상대경로로 지정이 되어있었다. onCreate 시점에 타일셋 자원도 로드하는 모양 ㅎㅎ</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">tilemapTiledJSON</span>(<span class="string">&quot;map&quot;</span>, <span class="string">&quot;assets/tilemaps/maps/super-mario.json&quot;</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&quot;tiles1&quot;</span>, <span class="string">&quot;assets/tilemaps/tiles/super-mario.png&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>타일셋을 포함해서 저장했을 때 왜 깨지는지까지는 빨리 파악이 어려울 것 같으니 우선은 예제를 참고하여 얼른 넘어가기로하고 (응 그렇게 넘어간거 산더미~) 나도 타일셋 이미지를 asset 쪽에 넣어줬다.</p>
<h3 id="짜잔"><a href="#짜잔" class="headerlink" title="짜잔"></a>짜잔</h3><p>onCreate 함수에 아래와 같이 에셋과 맵정보를 로드하면 화면에 희의실이 그려진 것을 확인할 수 있다 :) 이제 다음 포스트 부터는 실제로 캐릭터를 이동해보도록 하겠다</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">tilemapTiledJSON</span>(<span class="string">&quot;map&quot;</span>, <span class="string">&quot;assets/tilemaps/maps/super-mario.json&quot;</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">load</span>.<span class="title function_">image</span>(<span class="string">&quot;tiles1&quot;</span>, <span class="string">&quot;assets/tilemaps/tiles/super-mario.png&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>개발일지</category>
        <category>개더타운 클론코딩</category>
      </categories>
      <tags>
        <tag>토이프로젝트</tag>
        <tag>WebRTC</tag>
        <tag>Phaser</tag>
      </tags>
  </entry>
  <entry>
    <title>[토이프로젝트] 개더타운 클론코딩 - 3</title>
    <url>/2022/08/25/ToyProjects/Gather/gather-clonecoding-3/</url>
    <content><![CDATA[<p>이전 포스트에 이어서 DELEVERY했던 내용 중 5.회의실 입장 구현하기 항목까지 기록한다.</p>
<ol>
<li><del>git repository 생성 및 각 모듈 셋업하기</del></li>
<li><del>화면 뼈대 구성하기</del></li>
<li><del>맵 구성하기</del></li>
<li><strong>캐릭터 이동 구현하기</strong></li>
<li><strong>회의실 입장 구현하기</strong></li>
<li>2인 음성 영상 챗 구현하기</li>
<li>다자 음성 영상 챗 구현하기</li>
<li>미디어 설정 기능 구현하기</li>
</ol>
<h2 id="4-캐릭터-이동-구현하기"><a href="#4-캐릭터-이동-구현하기" class="headerlink" title="4. 캐릭터 이동 구현하기"></a>4. 캐릭터 이동 구현하기</h2><p>캐릭터 이동도 사실은 이전 포스트에서 본 예제 코드에 친절히 있었다. create에 에셋을 로드하고 update에 이동 시 애니메이션을 표현해주면 된다.</p>
<h2 id="5-회의실-입장-구현하기"><a href="#5-회의실-입장-구현하기" class="headerlink" title="5. 회의실 입장 구현하기"></a>5. 회의실 입장 구현하기</h2><p>대망의 회의실 입장 구현~ 이라고 해봤자 별거없다 ^_^<br>캐릭터가 이동할 때마다 회의실 사각형안에 캐릭터의 좌표가 포함되는지 계산하고, 회의실에 들어온 사람이 2명 이상이 되는 순간 WebRTC 커넥션을 열어주면 된다. 시간을 좀 더 써본다면 이 좌표 계산에도 최적의 알고리즘이 있을 것 같긴하다 ㅎㅎ</p>
]]></content>
      <categories>
        <category>개발일지</category>
        <category>개더타운 클론코딩</category>
      </categories>
      <tags>
        <tag>토이프로젝트</tag>
        <tag>WebRTC</tag>
        <tag>Phaser</tag>
      </tags>
  </entry>
  <entry>
    <title>[토이프로젝트] 개더타운 클론코딩 - 4</title>
    <url>/2022/08/28/ToyProjects/Gather/gather-clonecoding-4/</url>
    <content><![CDATA[<p>이전 포스트에 이어서 DELEVERY했던 내용 중 8.맵 구성하기 항목까지 기록한다.</p>
<ol>
<li><del>git repository 생성 및 각 모듈 셋업하기</del></li>
<li><del>화면 뼈대 구성하기</del></li>
<li><del>맵 구성하기</del></li>
<li><del>캐릭터 이동 구현하기</del></li>
<li><del>회의실 입장 구현하기</del></li>
<li><strong>2인 음성 영상 챗 구현하기</strong><br>🎁 WebRTC 예제 이해 및 응용</li>
<li><strong>다자 음성 영상 챗 구현하기</strong></li>
<li><strong>미디어 설정 기능 구현하기</strong></li>
</ol>
<h2 id="6-2인-음성-영상-챗-구현하기"><a href="#6-2인-음성-영상-챗-구현하기" class="headerlink" title="6. 2인 음성 영상 챗 구현하기"></a>6. 2인 음성 영상 챗 구현하기</h2><p><a href="https://codelabs.developers.google.com/codelabs/webrtc-web?hl=ko#0">codelab</a></p>
<h2 id="7-다자-음성-영상-챗-구현하기"><a href="#7-다자-음성-영상-챗-구현하기" class="headerlink" title="7. 다자 음성 영상 챗 구현하기"></a>7. 다자 음성 영상 챗 구현하기</h2><h2 id="8-미디어-설정-기능-구현하기"><a href="#8-미디어-설정-기능-구현하기" class="headerlink" title="8. 미디어 설정 기능 구현하기"></a>8. 미디어 설정 기능 구현하기</h2>]]></content>
      <categories>
        <category>개발일지</category>
        <category>개더타운 클론코딩</category>
      </categories>
      <tags>
        <tag>토이프로젝트</tag>
        <tag>WebRTC</tag>
        <tag>Phaser</tag>
      </tags>
  </entry>
</search>
